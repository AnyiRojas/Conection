#SERVER CONFIGURATION
PORT = 4000

#DATABASE CONFIGURATION

DB_PORT = 3307
DB_USER = "root"
DB_PASS = ""
DB_HOST = "localhost"
DB_SCHEMA = "distribuidora_de_flores"

EMAIL_USER=dayabohorquez93@gmail.com
EMAIL_PASS=lgruwuzwpkqbwrbf

JWT_SECRET=esta-es-una-llave-secreta

-- Eliminar base de datos si existe y crear una nueva
DROP DATABASE IF EXISTS distribuidora_de_flores;
CREATE DATABASE distribuidora_de_flores;
USE distribuidora_de_flores;

CREATE TABLE Usuario (
  documento INT AUTO_INCREMENT PRIMARY KEY,
  nombre_usuario VARCHAR(50),
  apellido_usuario VARCHAR(50),
  correo_electronico_usuario VARCHAR(100),
  contrasena_usuario TEXT,
  direccion VARCHAR(255),
  fecha_registro DATE,
  rol_usuario VARCHAR(50) DEFAULT 'Cliente',
  estado_usuario BOOLEAN,
  token_recuperacion VARCHAR(255) DEFAULT NULL,
  fecha_token DATETIME DEFAULT NULL
);

CREATE TABLE Tipo_Flor (
  id_tipo_flor INT AUTO_INCREMENT PRIMARY KEY,
  nombre_tipo_flor VARCHAR(50) NOT NULL
);

CREATE TABLE Fecha_Especial (
  id_fecha_especial INT AUTO_INCREMENT PRIMARY KEY,
  nombre_fecha_especial VARCHAR(50) NOT NULL
);

CREATE TABLE Evento (
  id_evento INT AUTO_INCREMENT PRIMARY KEY,
  nombre_evento VARCHAR(50) NOT NULL,
  descripcion TEXT,
  foto_evento TEXT,
  foto_eventoURL TEXT
);

CREATE TABLE Producto (
    id_producto INT AUTO_INCREMENT PRIMARY KEY,
    codigo_producto INT NOT NULL,
    nombre_producto VARCHAR(30) NOT NULL,
    foto_Producto TEXT,
    foto_ProductoURL TEXT,
    descripcion_producto VARCHAR(255) NOT NULL,
    precio_producto DECIMAL(10,2) NOT NULL,
    estado_producto BOOLEAN NOT NULL DEFAULT TRUE,
    cantidad_disponible INT NOT NULL DEFAULT 0,
    precio_adicional DECIMAL(10, 2) NOT NULL,
    id_tipo_flor INT,
    id_evento INT,
    id_fecha_especial INT,
    FOREIGN KEY (id_tipo_flor) REFERENCES Tipo_Flor(id_tipo_flor) ON DELETE CASCADE,
    FOREIGN KEY (id_evento) REFERENCES Evento(id_evento) ON DELETE CASCADE,
    FOREIGN KEY (id_fecha_especial) REFERENCES Fecha_Especial(id_fecha_especial) ON DELETE SET NULL
);

CREATE TABLE Carrito (
  id_carrito INT AUTO_INCREMENT PRIMARY KEY,
  documento INT NOT NULL,
  fecha DATE DEFAULT CURRENT_TIMESTAMP,
  total DECIMAL(10, 2) DEFAULT 0,
  iva decimal(10,2) DEFAULT 0.00,
  total_con_iva decimal(10,2) DEFAULT 0.00,
  FOREIGN KEY (documento) REFERENCES Usuario(documento) ON DELETE CASCADE
);

CREATE TABLE Carrito_Item (
  id_carrito_item INT AUTO_INCREMENT PRIMARY KEY,
  id_carrito INT NOT NULL,
  id_producto INT NOT NULL,
  cantidad INT NOT NULL,
  dedicatoria TEXT,
  opcion_adicional ENUM('Ninguno', 'Vino', 'Chocolates'),
  precio_adicional DECIMAL(10, 2),
  FOREIGN KEY (id_carrito) REFERENCES Carrito(id_carrito) ON DELETE CASCADE,
  FOREIGN KEY (id_producto) REFERENCES Producto(id_producto) ON DELETE CASCADE
);

CREATE TABLE Pago (
  id_pago INT AUTO_INCREMENT PRIMARY KEY,
  documento INT NOT NULL,
  fecha_pago DATETIME NOT NULL,
  metodo_pago ENUM('Nequi', 'Bancolombia', 'Efectivo') NOT NULL,
  subtotal_pago DECIMAL(10,2) NOT NULL,
  total_pago DECIMAL(10,2) NOT NULL,
  estado_pago ENUM('Exitoso', 'Pendiente', 'Fallido', 'Cancelado') DEFAULT 'Pendiente',
  FOREIGN KEY (documento) REFERENCES Usuario(documento) ON DELETE CASCADE
);

CREATE TABLE Pedido (
  id_pedido INT AUTO_INCREMENT PRIMARY KEY,
  fecha_pedido DATE NOT NULL,
  estado_pedido ENUM('Pendiente', 'Enviado', 'Entregado', 'Cancelado') NOT NULL DEFAULT 'Pendiente',
  total_pagado DECIMAL(10,2) NOT NULL,
  direccion_envio VARCHAR(255),
  documento INT NOT NULL,
  pago_id INT NOT NULL,
  FOREIGN KEY (documento) REFERENCES Usuario(documento) ON DELETE CASCADE,
  FOREIGN KEY (pago_id) REFERENCES Pago(id_pago) ON DELETE CASCADE
);

CREATE TABLE Pedido_Item (
  id_pedido_item INT AUTO_INCREMENT PRIMARY KEY,
  id_pedido INT NOT NULL,
  id_producto INT NOT NULL,
  cantidad INT NOT NULL,
  precio_unitario DECIMAL(10,2) NOT NULL,
  opcion_adicional ENUM('Ninguno', 'Vino', 'Chocolates') DEFAULT 'Ninguno',
  precio_adicional DECIMAL(10, 2),
  dedicatoria VARCHAR(255),
  FOREIGN KEY (id_pedido) REFERENCES Pedido(id_pedido) ON DELETE CASCADE,
  FOREIGN KEY (id_producto) REFERENCES Producto(id_producto) ON DELETE CASCADE
);

CREATE TABLE Envio (
  id_envio INT AUTO_INCREMENT PRIMARY KEY,
  fecha_envio DATE NOT NULL,
  estado_envio ENUM('Preparando', 'En camino', 'Entregado', 'Retrasado') NOT NULL,
  pedido_id INT NOT NULL,
  FOREIGN KEY (pedido_id) REFERENCES Pedido(id_pedido) ON DELETE CASCADE
);

-- Tabla Usuario
INSERT INTO Usuario (nombre_usuario, apellido_usuario, correo_electronico_usuario, contrasena_usuario, direccion, fecha_registro, rol_usuario, estado_usuario) VALUES 
('Juan', 'Pérez', 'juan.perez@example.com', 'password123', 'Calle 123', '2023-01-01', 'Cliente', TRUE),
('María', 'Gómez', 'maria.gomez@example.com', 'password456', 'Avenida 456', '2023-01-02', 'Cliente', TRUE),
('Carlos', 'López', 'carlos.lopez@example.com', 'password789', 'Carrera 789', '2023-01-03', 'Administrador', TRUE),
('Lucía', 'Martínez', 'lucia.martinez@example.com', 'password101', 'Calle 101', '2023-01-04', 'Cliente', TRUE),
('Javier', 'Sánchez', 'javier.sanchez@example.com', 'password202', 'Avenida 202', '2023-01-05', 'Cliente', TRUE);

-- Tabla Tipo_Flor
INSERT INTO Tipo_Flor (nombre_tipo_flor) VALUES 
('Rosa'),
('Lirio'),
('Orquídea'),
('Tulipán'),
('Girasol');

-- Tabla Fecha_Especial
INSERT INTO Fecha_Especial (nombre_fecha_especial) VALUES 
('San Valentín'),
('Día de la Madre'),
('Navidad'),
('Aniversario'),
('Cumpleaños');

-- Tabla Evento
INSERT INTO Evento (nombre_evento, descripcion, foto_evento, foto_eventoURL) VALUES 
('Boda', 'Celebración de matrimonio', 'foto_boda.jpg', 'http://example.com/foto_boda.jpg'),
('Cumpleaños', 'Fiesta de cumpleaños', 'foto_cumpleaños.jpg', 'http://example.com/foto_cumpleaños.jpg'),
('Graduación', 'Celebración de graduación', 'foto_graduacion.jpg', 'http://example.com/foto_graduacion.jpg'),
('Aniversario', 'Celebración de aniversario', 'foto_aniversario.jpg', 'http://example.com/foto_aniversario.jpg'),
('Fiesta de Fin de Año', 'Celebración de año nuevo', 'foto_fin_de_año.jpg', 'http://example.com/foto_fin_de_año.jpg');

-- Tabla Producto
INSERT INTO Producto (codigo_producto, nombre_producto, foto_Producto, foto_ProductoURL, descripcion_producto, precio_producto, estado_producto, cantidad_disponible, id_tipo_flor, id_evento, id_fecha_especial) VALUES 
(1001, 'Ramo de Rosas', 'ramo_rosas.jpg', 'http://example.com/ramo_rosas.jpg', 'Ramo de 12 rosas rojas.', 50000.00, TRUE, 10, 1, 1, 1),
(1002, 'Orquídea Blanca', 'orquidea_blanca.jpg', 'http://example.com/orquidea_blanca.jpg', 'Orquídea blanca en maceta.', 30000.00, TRUE, 15, 3, 2, 2),
(1003, 'Tulipanes de Colores', 'tulipanes_colores.jpg', 'http://example.com/tulipanes_colores.jpg', 'Ramo de tulipanes de varios colores.', 45000.00, TRUE, 20, 4, 3, NULL),
(1004, 'Girasoles', 'girasoles.jpg', 'http://example.com/girasoles.jpg', 'Ramo de girasoles frescos.', 35000.00, TRUE, 12, 5, 4, 3),
(1005, 'Ramo de Lirios', 'ramo_lirios.jpg', 'http://example.com/ramo_lirios.jpg', 'Ramo de lirios blancos.', 60000.00, TRUE, 8, 2, 5, 1);

-- Tabla Carrito
INSERT INTO Carrito (documento, fecha, total, iva, total_con_iva) VALUES 
(1, '2023-10-01', 507000.00, 96330.00, 603330.00),
(2, '2023-10-02', 30000.00, 0.00, 30000.00),
(3, '2023-10-03', 45000.00, 0.00, 45000.00),
(4, '2023-10-04', 60000.00, 0.00, 60000.00),
(5, '2023-10-05', 20000.00, 0.00, 20000.00);

-- Tabla Carrito_Item
INSERT INTO Carrito_Item (id_carrito, id_producto, cantidad, dedicatoria, opcion_adicional, precio_adicional) VALUES 
(1, 1, 2, 'Feliz Cumpleaños', 'Ninguno', 0),
(1, 2, 1, 'Para mi madre', 'Vino', 5000),
(2, 3, 3, NULL, 'Ninguno', 0),
(3, 4, 1, 'Con cariño', 'Chocolates', 3000),
(4, 5, 2, NULL, 'Ninguno', 200);

-- Tabla Pago
INSERT INTO Pago (documento, fecha_pago, metodo_pago, subtotal_pago, total_pago, estado_pago) VALUES 
(1, '2023-10-01 10:00:00', 'Nequi', 150000.00, 150000.00, 'Exitoso'),
(2, '2023-10-02 11:00:00', 'Bancolombia', 30000.00, 30000.00, 'PEND//iente'),
(3, '2023-10-03 12:00:00', 'Efectivo', 45000.00, 45000.00, 'Exitoso'),
(4, '2023-10-04 13:00:00', 'Nequi', 60000.00, 60000.00, 'Fallido'),
(5, '2023-10-05 14:00:00', 'Bancolombia', 20000.00, 20000.00, 'Exitoso');

-- Tabla Pedido
INSERT INTO Pedido (fecha_pedido, estado_pedido, total_pagado, documento, pago_id) VALUES 
('2023-10-01 10:00:00', 'Pendiente', 150000.00, 1, 1),
('2023-10-02 11:00:00', 'Enviado', 30000.00, 2, 2),
('2023-10-03 12:00:00', 'Entregado', 45000.00, 3, 3),
('2023-10-04 13:00:00', 'Cancelado', 60000.00, 4, 4),
('2023-10-05 14:00:00', 'Pendiente', 20000.00, 5, 5);

-- Tabla Pedido_Item
INSERT INTO Pedido_Item (id_pedido, id_producto, cantidad, precio_unitario, opcion_adicional) VALUES 
(1, 1, 2, 50000.00, 'Ninguno'),
(1, 2, 1, 30000.00, 'Vino'),
(2, 3, 3, 45000.00, 'Ninguno'),
(3, 4, 1, 35000.00, 'Chocolates'),
(4, 5, 2, 60000.00, 'Ninguno');

-- Tabla Envio
INSERT INTO Envio (fecha_envio, estado_envio, pedido_id) VALUES 
('2023-10-02', 'Preparando', 1),
('2023-10-03', 'En camino', 2),
('2023-10-04', 'Entregado', 3),
('2023-10-05', 'Retrasado', 4),
('2023-10-06', 'Preparando', 5);

DELIMITER //

CREATE PROCEDURE ActualizarCantidadCarrito (
    IN p_id_carrito_item INT,
    IN p_cantidad INT
)
BEGIN
    UPDATE Carrito_Item
    SET cantidad = p_cantidad
    WHERE id_carrito_item = p_id_carrito_item;

    CALL ActualizarTotalCarrito((SELECT id_carrito FROM Carrito_Item WHERE id_carrito_item = p_id_carrito_item));
END//

CREATE PROCEDURE ActualizarCantidadCarritoItem (
    IN id_carrito_item INT,
    IN cantidad INT,
    IN carrito_id INT
)
BEGIN
    UPDATE Carrito_Item
    SET cantidad = cantidad
    WHERE id_carrito_item = id_carrito_item;

    CALL ActualizarTotalCarrito(carrito_id);
END//

CREATE PROCEDURE ActualizarCarritoItem (
    IN p_id_carrito_item INT,
    IN p_opcion_adicional VARCHAR(255),
    IN p_dedicatoria VARCHAR(255)
)
BEGIN
    DECLARE nuevo_precio_adicional DECIMAL(10, 2);

    SET nuevo_precio_adicional = 
        CASE p_opcion_adicional
            WHEN 'Ninguno' THEN 0
            WHEN 'Chocolates' THEN 30000
            WHEN 'Vino' THEN 86000
            ELSE 0
        END;
	
    UPDATE Carrito_Item
    SET opcion_adicional = p_opcion_adicional,
        dedicatoria = p_dedicatoria,
        precio_adicional = nuevo_precio_adicional
    WHERE id_carrito_item = p_id_carrito_item;

    CALL ActualizarTotalCarrito((SELECT id_carrito FROM Carrito_Item WHERE id_carrito_item = p_id_carrito_item));
END//

CREATE PROCEDURE ActualizarContrasena (
    IN token VARCHAR(255),
    IN nueva_contrasena TEXT
)
BEGIN
    DECLARE doc INT;

    SELECT documento INTO doc FROM Usuario WHERE token_recuperacion = token;

    IF doc IS NOT NULL THEN
        UPDATE Usuario SET contrasena_usuario = nueva_contrasena, token_recuperacion = NULL WHERE documento = doc;
    ELSE
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Token inválido.';
    END IF;
END//

CREATE PROCEDURE ActualizarEnvio (
    IN id_envio INT,
    IN fecha_envio DATETIME,
    IN pedido_id INT
)
BEGIN
    UPDATE Envio
    SET fecha_envio = fecha_envio,
        pedido_id = pedido_id
    WHERE id_envio = id_envio;
END//

CREATE PROCEDURE ActualizarEstadoEnvio (
    IN p_id_envio INT,
    IN p_estado_envio ENUM('Preparando', 'En camino', 'Entregado', 'Retrasado')
)
BEGIN
    UPDATE Envio
    SET estado_envio = p_estado_envio
    WHERE id_envio = p_id_envio;
END//

CREATE PROCEDURE ActualizarEstadoPago (
    IN p_id_pago INT,
    IN p_estado_pago ENUM('Exitoso', 'Pendiente', 'Fallido', 'Cancelado')
)
BEGIN
    UPDATE Pago
    SET estado_pago = p_estado_pago
    WHERE id_pago = p_id_pago;
END//

CREATE PROCEDURE ActualizarEstadoPedido (
    IN p_id_pedido INT,
    IN nuevo_estado ENUM('Pendiente', 'Enviado', 'Entregado', 'Cancelado')
)
BEGIN
    UPDATE Pedido
    SET estado_pedido = nuevo_estado
    WHERE id_pedido = p_id_pedido;
END//

CREATE PROCEDURE ActualizarFechaEspecial (
    IN p_id_fecha_especial INT,
    IN p_nombre_fecha_especial VARCHAR(50)
)
BEGIN
    UPDATE Fecha_Especial
    SET nombre_fecha_especial = p_nombre_fecha_especial
    WHERE id_fecha_especial = p_id_fecha_especial;
END//

CREATE PROCEDURE ActualizarPago (
    IN id_pago INT,
    IN documento INT,
    IN fecha_pago DATETIME,
    IN metodo_pago ENUM('Nequi', 'Bancolombia', 'Efectivo'),
    IN subtotal_pago DECIMAL(10, 2),
    IN total_pago DECIMAL(10, 2)
)
BEGIN
    UPDATE Pago
    SET 
        documento = documento,
        fecha_pago = fecha_pago,
        metodo_pago = metodo_pago,
        subtotal_pago = subtotal_pago,
        total_pago = total_pago
    WHERE id_pago = id_pago;
END// 

CREATE PROCEDURE ActualizarPedido (
    IN p_id_pedido INT,
    IN p_fecha_pedido DATETIME,
    IN p_total_pagado DECIMAL(10, 2),
    IN p_documento INT,
    IN p_pago_id INT
)
BEGIN
    UPDATE Pedido
    SET 
        fecha_pedido = p_fecha_pedido,
        total_pagado = p_total_pagado,
        documento = p_documento,
        pago_id = p_pago_id
    WHERE id_pedido = p_id_pedido;
END //

CREATE PROCEDURE ActualizarPedidoItem (
    IN id_pedido_item INT,
    IN cantidad INT,
    IN precio_unitario DECIMAL(10, 2),
    IN opcion_adicional ENUM('Ninguno', 'Vino', 'Chocolates')
)
BEGIN
    UPDATE Pedido_Item
    SET 
        cantidad = cantidad,
        precio_unitario = precio_unitario,
        opcion_adicional = opcion_adicional
    WHERE id_pedido_item = id_pedido_item;
END// 

CREATE PROCEDURE ActualizarProducto (
    IN p_id_producto INT,
    IN p_codigo_producto INT,
    IN p_nombre_producto VARCHAR(30),
    IN p_foto_producto TEXT,
    IN p_foto_productoURL TEXT,
    IN p_descripcion_producto VARCHAR(255),
    IN p_precio_producto DECIMAL(10,2),
    IN p_cantidad_disponible INT,
    IN p_id_tipo_flor INT,
    IN p_id_evento INT,
    IN p_id_fecha_especial INT  
)
BEGIN
    UPDATE Producto
    SET 
        codigo_producto = p_codigo_producto,
        nombre_producto = p_nombre_producto,
        foto_producto = p_foto_producto,
        foto_productoURL = p_foto_productoURL,
        descripcion_producto = p_descripcion_producto,
        precio_producto = p_precio_producto,
        cantidad_disponible = p_cantidad_disponible,
        id_tipo_flor = p_id_tipo_flor,
        id_evento = p_id_evento,
        id_fecha_especial = p_id_fecha_especial  
    WHERE id_producto = p_id_producto;
END//

CREATE PROCEDURE ActualizarTipoFlor (
    IN p_id_tipo_flor INT,
    IN p_nombre_tipo_flor VARCHAR(50)
)
BEGIN
    UPDATE Tipo_Flor
    SET nombre_tipo_flor = p_nombre_tipo_flor
    WHERE id_tipo_flor = p_id_tipo_flor;
END //

CREATE PROCEDURE ActualizarTotalCarrito (
    IN id_carrito_param INT
)
BEGIN
    DECLARE total DECIMAL(10, 2) DEFAULT 0;
    DECLARE iva DECIMAL(10, 2) DEFAULT 0;
    DECLARE total_con_iva DECIMAL(10, 2) DEFAULT 0;

    SELECT SUM((ci.cantidad * (p.precio_producto + IFNULL(ci.precio_adicional, 0))) ) INTO total
    FROM Carrito_Item ci
    JOIN Producto p ON ci.id_producto = p.id_producto
    WHERE ci.id_carrito = id_carrito_param;

    SET total = IFNULL(total, 0);
    SET iva = total * 0.19;
    SET total_con_iva = total + iva;

    UPDATE Carrito
    SET 
        total = total,
        iva = iva,
        total_con_iva = total_con_iva
    WHERE id_carrito = id_carrito_param;
END// 

CREATE PROCEDURE ActualizarUsuario (
    IN p_documento INT,
    IN p_nombre_usuario VARCHAR(50),
    IN p_apellido_usuario VARCHAR(50),
    IN p_correo_electronico_usuario VARCHAR(100),
    IN p_direccion VARCHAR(255)
)
BEGIN
    UPDATE Usuario
    SET
        nombre_usuario = IFNULL(p_nombre_usuario, nombre_usuario),
        apellido_usuario = IFNULL(p_apellido_usuario, apellido_usuario),
        correo_electronico_usuario = IFNULL(p_correo_electronico_usuario, correo_electronico_usuario),
        direccion = IFNULL(p_direccion, direccion)
    WHERE documento = p_documento;
END//

CREATE PROCEDURE AddEvento (
    IN nombre_evento VARCHAR(50),
    IN foto_evento TEXT,
    IN foto_eventoURL TEXT,
    IN descripcion TEXT
)
BEGIN
    INSERT INTO Evento (nombre_evento, foto_evento, foto_eventoURL, descripcion)
    VALUES (nombre_evento, foto_evento, foto_eventoURL, descripcion);
END// 

CREATE PROCEDURE AgregarAlCarrito (
    IN p_documento INT,
    IN p_id_producto INT,
    IN p_cantidad INT
)
BEGIN
    DECLARE carrito_id INT;

    SELECT id_carrito INTO carrito_id
    FROM Carrito
    WHERE documento = p_documento LIMIT 1;

    IF carrito_id IS NULL THEN
        INSERT INTO Carrito (documento)
        VALUES (p_documento);
        SET carrito_id = LAST_INSERT_ID();
    END IF;

    INSERT INTO Carrito_Item (id_carrito, id_producto, cantidad)
    VALUES (carrito_id, p_id_producto, p_cantidad);

    CALL ActualizarTotalCarrito(carrito_id);
END// 

CREATE PROCEDURE AgregarItemAlCarrito (
    IN p_documento INT,
    IN id_producto INT,
    IN cantidad INT,
    IN dedicatoria TEXT,
    IN opcion_adicional ENUM('Ninguno', 'Vino', 'Chocolates'),
    IN precio_adicional DECIMAL(10,2)
)
BEGIN
    DECLARE total DECIMAL(10, 2);
    DECLARE iva DECIMAL(10, 2);
    DECLARE precio_producto DECIMAL(10, 2);
    DECLARE carrito_id INT;

    SELECT precio_producto INTO precio_producto FROM Producto WHERE id_producto = id_producto LIMIT 1;

    SELECT id_carrito INTO carrito_id
    FROM Carrito
    WHERE documento = p_documento LIMIT 1;

    IF carrito_id IS NULL THEN
        INSERT INTO Carrito (documento) VALUES (p_documento);
        SET carrito_id = LAST_INSERT_ID();
    END IF;

    SET total = (precio_producto + precio_adicional) * cantidad;
    SET iva = total * 0.19;
    SET total = total + iva;

    INSERT INTO Carrito_Item (id_carrito, id_producto, cantidad, dedicatoria, opcion_adicional, precio_adicional)
    VALUES (carrito_id, id_producto, cantidad, dedicatoria, opcion_adicional, precio_adicional);

    CALL ActualizarTotalCarrito(carrito_id);
END//

CREATE PROCEDURE BuscarUsuarioPorCorreo (
    IN correo VARCHAR(100)
)
BEGIN
    SELECT * FROM Usuario WHERE correo_electronico_usuario = correo;
END// 

CREATE PROCEDURE CambiarEstadoProducto (
    IN p_producto_id INT,
    IN p_nuevo_estado BOOLEAN
)
BEGIN
    UPDATE Producto
    SET estado_producto = p_nuevo_estado
    WHERE id_producto = p_producto_id;
END// 

CREATE PROCEDURE CambiarEstadoUsuario (
    IN p_documento INT
)
BEGIN 
    DECLARE estado_actual BOOLEAN;

    SELECT estado_usuario INTO estado_actual
    FROM Usuario
    WHERE documento = p_documento;

    SET estado_actual = NOT estado_actual;

    UPDATE Usuario
    SET estado_usuario = estado_actual
    WHERE documento = p_documento;

    SELECT estado_usuario AS estado_despues
    FROM Usuario
    WHERE documento = p_documento;
END// 

CREATE PROCEDURE CrearCarrito (
    IN documento INT
)
BEGIN
    INSERT INTO Carrito (documento, total) VALUES (documento, 0);
    SELECT LAST_INSERT_ID() AS id_carrito;
END// 

CREATE PROCEDURE CrearEnvio (
    IN fecha_envio DATETIME,
    IN pedido_id INT
)
BEGIN
    INSERT INTO Envio (fecha_envio, estado_envio, pedido_id)
    VALUES (fecha_envio, 'Preparando', pedido_id);
END// 

CREATE PROCEDURE CrearFechaEspecial (
    IN nombre_fecha_especial VARCHAR(50)
)
BEGIN
    INSERT INTO Fecha_Especial (nombre_fecha_especial)
    VALUES (nombre_fecha_especial);
END// 

CREATE PROCEDURE CrearProducto (
    IN p_codigo_producto INT,
    IN p_nombre_producto VARCHAR(30),
    IN p_foto_Producto TEXT,
    IN p_foto_ProductoURL TEXT,
    IN p_descripcion_producto VARCHAR(255),
    IN p_precio_producto DECIMAL(10,2),
    IN p_cantidad_disponible INT,
    IN p_id_tipo_flor INT,
    IN p_id_evento INT,
    IN p_id_fecha_especial INT
)
BEGIN
    INSERT INTO Producto(
        codigo_producto, nombre_producto, foto_Producto, foto_ProductoURL, descripcion_producto,
        precio_producto, cantidad_disponible, id_tipo_flor, id_evento, id_fecha_especial
    ) VALUES (
        p_codigo_producto, p_nombre_producto, p_foto_Producto, p_foto_ProductoURL, p_descripcion_producto,
        p_precio_producto, p_cantidad_disponible, p_id_tipo_flor, p_id_evento, p_id_fecha_especial
    );
END// 

CREATE PROCEDURE CrearTipoFlor (
    IN nombre_tipo_flor VARCHAR(50)
)
BEGIN
    INSERT INTO Tipo_Flor (nombre_tipo_flor) VALUES (nombre_tipo_flor);
END// 

CREATE PROCEDURE CrearUsuario (
    IN p_documento INT,
    IN p_nombre_usuario VARCHAR(50),
    IN p_apellido_usuario VARCHAR(50),
    IN p_correo_electronico_usuario VARCHAR(255),
    IN p_contrasena_usuario TEXT,
    IN p_direccion VARCHAR(255),
    IN p_fecha_registro DATE,
    IN p_estado_usuario BOOLEAN
)
BEGIN
    INSERT INTO Usuario (
        documento,
        nombre_usuario,
        apellido_usuario,
        correo_electronico_usuario,
        contrasena_usuario,
        direccion,
        fecha_registro,
        estado_usuario
    ) VALUES (
        p_documento,
        p_nombre_usuario,
        p_apellido_usuario,
        p_correo_electronico_usuario,
        p_contrasena_usuario,
        p_direccion,
        p_fecha_registro,
        p_estado_usuario
    );
END// 

CREATE PROCEDURE DeleteEvento (
    IN p_id_evento INT
)
BEGIN
    DELETE FROM Evento WHERE id_evento = p_id_evento;
END// 

CREATE PROCEDURE EditarRolUsuario (
    IN p_documento INT,
    IN p_nuevo_rol VARCHAR(50)
)
BEGIN
    DECLARE rol_permitido BOOLEAN;

    SET rol_permitido = p_nuevo_rol IN ('Vendedor', 'Domiciliario', 'Administrador', 'Cliente');

    IF rol_permitido THEN
        UPDATE Usuario
        SET rol_usuario = p_nuevo_rol
        WHERE documento = p_documento;
    ELSE
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Rol no permitido.';
    END IF;
END// 

CREATE PROCEDURE EliminarDelCarrito(IN p_id_carrito INT)
BEGIN
    DELETE FROM Carrito_Item WHERE id_carrito = p_id_carrito;
    DELETE FROM Carrito WHERE id_carrito = p_id_carrito;
    CALL ActualizarTotalCarrito(p_id_carrito);
END// 

CREATE PROCEDURE EliminarEnvio(IN p_id_envio INT)
BEGIN
    DELETE FROM Envio WHERE id_envio = p_id_envio;
END// 

CREATE PROCEDURE EliminarFechaEspecial(IN id INT)
BEGIN
    DELETE FROM Fecha_Especial WHERE id_fecha_especial = id;
END// 

CREATE PROCEDURE EliminarItemDelCarrito(IN p_id_carrito_item INT)
BEGIN
    DECLARE carrito_id INT;
    SELECT id_carrito INTO carrito_id FROM Carrito_Item WHERE id_carrito_item = p_id_carrito_item;
    DELETE FROM Carrito_Item WHERE id_carrito_item = p_id_carrito_item;
    CALL ActualizarTotalCarrito(carrito_id);
END// 

CREATE PROCEDURE EliminarPago(IN id INT)
BEGIN
    DELETE FROM Pago WHERE id_pago = id;
END// 

CREATE PROCEDURE EliminarPedidoItem(IN id_pedido_item INT)
BEGIN
    DELETE FROM Pedido_Item WHERE id_pedido_item = id_pedido_item;
END// 

CREATE PROCEDURE EliminarTipoFlor(IN id INT)
BEGIN
    DELETE FROM Tipo_Flor WHERE id_tipo_flor = id;
END// 

CREATE PROCEDURE GetEventoById(IN id_evento INT)
BEGIN
    SELECT * FROM Evento WHERE id_evento = id_evento;
END// 

CREATE PROCEDURE ObtenerCarritoCompletoPorUsuarioId(IN p_documento INT)
BEGIN
    SELECT ci.id_carrito_item,
           ci.id_producto,  -- Agrega esta línea para incluir el id_producto
           ci.cantidad,
           ci.dedicatoria,
           ci.opcion_adicional,
           p.nombre_producto,
           p.precio_producto,
           p.foto_ProductoURL,
           COALESCE(ci.precio_adicional, 0) AS precio_adicional,
           (ci.cantidad * (p.precio_producto + COALESCE(ci.precio_adicional, 0))) AS total
    FROM Carrito_Item ci
    JOIN Carrito c ON ci.id_carrito = c.id_carrito
    JOIN Producto p ON ci.id_producto = p.id_producto
    WHERE c.documento = p_documento;
END//

CREATE PROCEDURE ObtenerCarritoItemsPorCarritoId(IN p_id_carrito INT)
BEGIN
    SELECT 
        ci.id_carrito_item,
        ci.id_carrito,
        ci.id_producto,
        ci.cantidad,
        ci.dedicatoria,
        ci.opcion_adicional,
        ci.precio_adicional,
        p.nombre_producto,
        p.precio_producto,
        p.foto_productoURL
    FROM 
        Carrito_Item ci
    JOIN 
        Producto p ON ci.id_producto = p.id_producto
    WHERE 
        ci.id_carrito = p_id_carrito;
END//

CREATE PROCEDURE ObtenerCarritoPorUsuarioId(IN p_documento INT)
BEGIN
    SELECT * FROM Carrito WHERE documento = p_documento;
END//

CREATE PROCEDURE ObtenerEnvioPorId(IN id INT)
BEGIN
    SELECT * FROM Envio WHERE id_envio = id;
END// 

CREATE PROCEDURE ObtenerPedidos()
BEGIN
    SELECT 
        p.id_pedido,
        p.fecha_pedido,
        p.estado_pedido,
        p.total_pagado,
        u.nombre_usuario,
        u.apellido_usuario,
        u.documento
    FROM Pedido p
    JOIN Usuario u ON p.documento = u.documento;
END //

CREATE PROCEDURE ObtenerEnvios()
BEGIN
    SELECT * FROM Envio;
END// 

CREATE PROCEDURE ObtenerEventos()
BEGIN
    SELECT * FROM Evento;
END// 

CREATE PROCEDURE ObtenerFechaEspecialPorId(IN id INT)
BEGIN
    SELECT * FROM Fecha_Especial WHERE id_fecha_especial = id;
END// 

CREATE PROCEDURE ObtenerFechasEspeciales()
BEGIN
    SELECT * FROM Fecha_Especial;
END// 

CREATE PROCEDURE ObtenerItemsPorPedido(IN id_pedido INT)
BEGIN
    SELECT * FROM Pedido_Item WHERE id_pedido = id_pedido;
END// 

CREATE PROCEDURE ObtenerPagoPorId(IN id INT)
BEGIN
    SELECT * FROM Pago WHERE id_pago = id;
END// 

CREATE PROCEDURE ObtenerPagos()
BEGIN
    SELECT * FROM Pago;
END// 

CREATE PROCEDURE ObtenerPedidoItemPorId(IN id_pedido_item INT)
BEGIN
    SELECT * FROM Pedido_Item WHERE id_pedido_item = id_pedido_item;
END// 


CREATE PROCEDURE ObtenerPedidoPorId(IN id_pedido INT)
BEGIN
    SELECT * FROM Pedido WHERE id_pedido = id_pedido;
END// 

CREATE PROCEDURE ObtenerPedidosPorUsuario(IN documento INT)
BEGIN
    SELECT * FROM Pedido WHERE documento = documento;
END// 

CREATE PROCEDURE ObtenerProductoPorId(IN p_id_producto INT)
BEGIN
    SELECT * FROM Producto WHERE id_producto = p_id_producto;
END// 

CREATE PROCEDURE ObtenerProductos()
BEGIN
    SELECT * FROM Producto;
END// 

CREATE PROCEDURE ObtenerProductosPorTipoFlor(
    IN tipoFlorId INT, 
    IN p_limit INT, 
    IN p_offset INT
)
BEGIN
    SELECT * FROM Producto 
    WHERE id_tipo_flor = tipoFlorId 
    LIMIT p_limit OFFSET p_offset;
END//

CREATE PROCEDURE ObtenerProductosPorFechaEspecial(
    IN fechaEspecialId INT, 
    IN p_limit INT, 
    IN p_offset INT
)
BEGIN
    SELECT * FROM Producto 
    WHERE id_fecha_especial = fechaEspecialId 
    LIMIT p_limit OFFSET p_offset;
END//

CREATE PROCEDURE ObtenerTipoFlorPorId(IN id INT)
BEGIN
    SELECT * FROM Tipo_Flor WHERE id_tipo_flor = id;
END// 

CREATE PROCEDURE ObtenerTiposFlor()
BEGIN
    SELECT * FROM Tipo_Flor;
END// 

CREATE PROCEDURE ObtenerUsuarioPorId(IN p_documento INT)
BEGIN
    SELECT * FROM Usuario WHERE documento = p_documento;
END// 

CREATE PROCEDURE ObtenerUsuarios()
BEGIN
    SELECT * FROM Usuario;
END// 

CREATE PROCEDURE ObtenerHistorialPedidos(IN p_documento INT)
BEGIN
    SELECT 
        p.id_pedido,
        p.fecha_pedido,
        p.estado_pedido,
        p.total_pagado,
        pa.metodo_pago,
        p.direccion_envio,
        GROUP_CONCAT(productos SEPARATOR ', ') AS productos
    FROM 
        Pedido p
    LEFT JOIN 
        Pago pa ON p.pago_id = pa.id_pago
    LEFT JOIN (
        SELECT 
            pi.id_pedido,
            CONCAT(SUM(pi.cantidad), ' x ', pr.nombre_producto, 
                   ' (', pi.opcion_adicional, ' - $', 
                   COALESCE(pi.precio_adicional, 0), ')') AS productos
        FROM 
            Pedido_Item pi
        LEFT JOIN 
            Producto pr ON pi.id_producto = pr.id_producto
        GROUP BY 
            pi.id_pedido, pi.opcion_adicional, pr.nombre_producto
    ) AS productos ON p.id_pedido = productos.id_pedido
    WHERE 
        p.documento = p_documento
    GROUP BY 
        p.id_pedido, p.fecha_pedido, p.estado_pedido, p.total_pagado, pa.metodo_pago, p.direccion_envio
    ORDER BY 
        p.fecha_pedido DESC;
END //

CREATE PROCEDURE CrearPago (
    IN documento INT,
    IN fecha_pago DATETIME,
    IN metodo_pago ENUM('Nequi', 'Bancolombia', 'Efectivo'),
    IN subtotal_pago DECIMAL(10, 2),
    IN total_pago DECIMAL(10, 2)
)
BEGIN
    INSERT INTO Pago (documento, fecha_pago, metodo_pago, subtotal_pago, total_pago)
    VALUES (documento, fecha_pago, metodo_pago, subtotal_pago, total_pago);
    
    SELECT LAST_INSERT_ID() AS id_pago;
END// 

CREATE PROCEDURE CrearPedido (
    IN fecha_pedido DATETIME,
    IN total_pagado DECIMAL(10, 2),
    IN documento INT,
    IN pago_id INT,
    IN direccion_envio VARCHAR(255)  -- Agrega este parámetro
)
BEGIN
    INSERT INTO Pedido (fecha_pedido, total_pagado, documento, pago_id, direccion_envio)  -- Asegúrate de que la columna exista en tu tabla
    VALUES (fecha_pedido, total_pagado, documento, pago_id, direccion_envio);
END //

CREATE PROCEDURE CrearPedidoItem(
    IN id_pedido INT,
    IN id_producto INT,
    IN cantidad INT,
    IN precio_unitario DECIMAL(10, 2),
    IN opcion_adicional ENUM('Ninguno', 'Vino', 'Chocolates'),
    IN precio_adicional DECIMAL(10, 2),
    IN dedicatoria VARCHAR(255)  -- Nuevo parámetro para la dedicatoria
)
BEGIN
    INSERT INTO Pedido_Item (id_pedido, id_producto, cantidad, precio_unitario, opcion_adicional, precio_adicional, dedicatoria)
    VALUES (id_pedido, id_producto, cantidad, precio_unitario, opcion_adicional, precio_adicional, dedicatoria);
END;

CREATE PROCEDURE ActualizarCantidadDisponible(
    IN p_id_producto INT,
    IN p_cantidad_a_descontar INT
)
BEGIN
    DECLARE cantidad_actual INT;

    -- Obtener la cantidad actual disponible para el producto específico
    SELECT cantidad_disponible INTO cantidad_actual
    FROM Producto
    WHERE id_producto = p_id_producto
    LIMIT 1;

    -- Validar que haya suficiente stock
    IF cantidad_actual >= p_cantidad_a_descontar THEN
        -- Actualizar la cantidad disponible solo para el producto específico
        UPDATE Producto
        SET cantidad_disponible = cantidad_disponible - p_cantidad_a_descontar
        WHERE id_producto = p_id_producto;

        -- Verificar si la cantidad disponible llega a 0 y desactivar el producto
        IF (cantidad_actual - p_cantidad_a_descontar) = 0 THEN
            CALL CambiarEstadoProducto(p_id_producto, 0); -- Cambiar a inactivo
        END IF;
    ELSE
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'No hay suficiente stock disponible';
    END IF;
END //

CREATE PROCEDURE RealizarPedido(
    IN documento INT,
    IN metodo_pago ENUM('Nequi', 'Bancolombia', 'Efectivo'),
    IN subtotal_pago DECIMAL(10, 2),
    IN total_pago DECIMAL(10, 2),
    IN items JSON,
    IN direccion_envio VARCHAR(255)
)
BEGIN
    DECLARE id_pago INT;
    DECLARE id_pedido INT;
    DECLARE fecha_pago DATETIME DEFAULT NOW();
    DECLARE item JSON;
    DECLARE cantidad INT;
    DECLARE id_producto INT;
    DECLARE precio_unitario DECIMAL(10, 2);
    DECLARE opcion_adicional ENUM('Ninguno', 'Vino', 'Chocolates');
    DECLARE precio_adicional DECIMAL(10, 2);
    DECLARE dedicatoria VARCHAR(255);

    -- Crear el pago y obtener el ID
    CALL CrearPago(documento, fecha_pago, metodo_pago, subtotal_pago, total_pago);
    SET id_pago = LAST_INSERT_ID();

    -- Crear el pedido y obtener el ID
    CALL CrearPedido(NOW(), total_pago, documento, id_pago, direccion_envio);
    SET id_pedido = LAST_INSERT_ID();

    -- Procesar los items del pedido
    SET @i = 0;
    WHILE @i < JSON_LENGTH(items) DO
        SET item = JSON_EXTRACT(items, CONCAT('$[', @i, ']'));
        SET id_producto = JSON_UNQUOTE(JSON_EXTRACT(item, '$.id_producto'));
        SET cantidad = CAST(JSON_UNQUOTE(JSON_EXTRACT(item, '$.cantidad')) AS UNSIGNED);
        SET precio_unitario = JSON_UNQUOTE(JSON_EXTRACT(item, '$.precio_unitario'));
        SET opcion_adicional = JSON_UNQUOTE(JSON_EXTRACT(item, '$.opcion_adicional'));
        SET precio_adicional = JSON_UNQUOTE(JSON_EXTRACT(item, '$.precio_adicional'));
        SET dedicatoria = JSON_UNQUOTE(JSON_EXTRACT(item, '$.dedicatoria')); -- Extraer la dedicatoria

        -- Imprimir ID del producto y cantidad solicitada
        SELECT CONCAT('ID del producto: ', id_producto, ' - Cantidad solicitada: ', cantidad) AS 'Debug Info';

        -- Llamar al procedimiento para actualizar la cantidad disponible
        CALL ActualizarCantidadDisponible(id_producto, cantidad);

        -- Insertar el item del pedido, incluyendo la dedicatoria
        CALL CrearPedidoItem(id_pedido, id_producto, cantidad, precio_unitario, opcion_adicional, precio_adicional, dedicatoria);

        SET @i = @i + 1;
    END WHILE;
END //

CREATE PROCEDURE UpdateEvento(
    IN p_id_evento INT,
    IN p_nombre_evento VARCHAR(50),
    IN p_foto_evento TEXT,
    IN p_foto_eventoURL TEXT,
    IN p_descripcion TEXT
)
BEGIN
    UPDATE Evento
    SET nombre_evento = p_nombre_evento,
        foto_evento = p_foto_evento,
        foto_eventoURL = p_foto_eventoURL,
        descripcion = p_descripcion
    WHERE id_evento = p_id_evento;
END// 

CREATE PROCEDURE VaciarCarrito(IN documento VARCHAR(20))
BEGIN
    DELETE FROM Carrito_Item WHERE id_carrito IN (SELECT id_carrito FROM Carrito WHERE documento = documento);
    DELETE FROM Carrito WHERE documento = documento;
END//

CREATE PROCEDURE ValidarToken(IN token VARCHAR(255))
BEGIN
    SELECT * FROM Usuario WHERE token_recuperacion = token;
END//

CREATE PROCEDURE VerificarDisponibilidadProducto(IN id_producto INT, IN cantidad INT)
BEGIN
    SELECT * FROM Producto WHERE id_producto = id_producto AND cantidad_disponible >= cantidad;
END//

CREATE PROCEDURE GetPedidoItems(IN pedido_id INT)
BEGIN
    SELECT 
        pi.id_pedido_item,
        pi.id_producto,
        pi.cantidad,
        pi.precio_unitario,
        pi.opcion_adicional,
        pi.precio_adicional,
        pr.nombre_producto,         -- Nombre del producto
        pr.foto_ProductoURL,           -- URL de la foto del producto
        p.direccion_envio,          -- Dirección de envío desde la tabla Pedido
        pi.dedicatoria              -- Dedicatoria desde la tabla Pedido_Item (eliminar si no existe)
    FROM 
        Pedido_Item pi
    JOIN 
        Pedido p ON pi.id_pedido = p.id_pedido
    JOIN 
        Producto pr ON pi.id_producto = pr.id_producto
    WHERE 
        p.id_pedido = pedido_id;
END;

SET SQL_SAFE_UPDATES = 0;

-- Crear el rol de Administrador
CREATE ROLE 'Administrador';

-- Crear el rol de VEND//edor
CREATE ROLE 'Vendedor';

-- Crear el rol de Domiciliario
CREATE ROLE 'Domiciliario';

UPDATE usuario
SET rol_usuario = 'Vendedor'
WHERE correo_electronico_usuario = 'juan@gmail.com';

UPDATE usuario
SET rol_usuario = 'Vendedor'
WHERE correo_electronico_usuario = 'luz@gmail.com';

UPDATE usuario
SET rol_usuario = 'Domiciliario'
WHERE correo_electronico_usuario = 'ven@gmail.com';
