#SERVER CONFIGURATION
PORT = 4000

#DATABASE CONFIGURATION

DB_PORT = 3306
DB_USER = "root"
DB_PASS = ""
DB_HOST = "localhost"
DB_SCHEMA = "distribuidora_de_flores"

EMAIL_USER=dayabohorquez93@gmail.com
EMAIL_PASS=lgruwuzwpkqbwrbf

JWT_SECRET=esta-es-una-llave-secreta

-- Eliminar base de datos si existe y crear una nueva
DROP DATABASE IF EXISTS distribuidora_de_flores;
CREATE DATABASE distribuidora_de_flores;
USE distribuidora_de_flores;

CREATE TABLE Usuario (
  documento INT AUTO_INCREMENT PRIMARY KEY,
  nombre_usuario VARCHAR(50),
  apellido_usuario VARCHAR(50),
  correo_electronico_usuario VARCHAR(100),
  contrasena_usuario TEXT,
  direccion VARCHAR(255),
  fecha_registro DATE,
  rol_usuario VARCHAR(50) DEFAULT 'Cliente',
  estado_usuario BOOLEAN,
  token_recuperacion VARCHAR(255) DEFAULT NULL,
  fecha_token DATETIME DEFAULT NULL
);

CREATE TABLE Tipo_Flor (
  id_tipo_flor INT AUTO_INCREMENT PRIMARY KEY,
  nombre_tipo_flor VARCHAR(50) NOT NULL
);

CREATE TABLE Fecha_Especial (
  id_fecha_especial INT AUTO_INCREMENT PRIMARY KEY,
  nombre_fecha_especial VARCHAR(50) NOT NULL
);

CREATE TABLE Evento (
  id_evento INT AUTO_INCREMENT PRIMARY KEY,
  nombre_evento VARCHAR(50) NOT NULL,
  descripcion TEXT,
  foto_evento TEXT,
  foto_eventoURL TEXT
);

CREATE TABLE Producto_Adicional (
    id_opcion INT AUTO_INCREMENT PRIMARY KEY,
    opcion_adicional VARCHAR(50),
    precio_adicional INT NOT NULL
) ENGINE=InnoDB;

CREATE TABLE Producto (
    id_producto INT AUTO_INCREMENT PRIMARY KEY,
    codigo_producto INT NOT NULL,
    nombre_producto VARCHAR(30) NOT NULL,
    foto_Producto TEXT,
    foto_ProductoURL TEXT,
    descripcion_producto VARCHAR(255) NOT NULL,
    precio_producto INT NOT NULL,
    estado_producto BOOLEAN NOT NULL DEFAULT TRUE,
    cantidad_disponible INT NOT NULL DEFAULT 0,
    id_tipo_flor INT,
    id_evento INT,
    id_fecha_especial INT,
    FOREIGN KEY (id_tipo_flor) REFERENCES Tipo_Flor(id_tipo_flor) ON DELETE CASCADE,
    FOREIGN KEY (id_evento) REFERENCES Evento(id_evento) ON DELETE CASCADE,
    FOREIGN KEY (id_fecha_especial) REFERENCES Fecha_Especial(id_fecha_especial) ON DELETE SET NULL
) ENGINE=InnoDB;

CREATE TABLE Carrito (
  id_carrito INT AUTO_INCREMENT PRIMARY KEY,
  documento INT NOT NULL,
  fecha DATE DEFAULT CURRENT_TIMESTAMP,
  total INT DEFAULT 0,
  iva INT DEFAULT 0,
  total_con_iva INT DEFAULT 0,
  FOREIGN KEY (documento) REFERENCES Usuario(documento) ON DELETE CASCADE
) ENGINE=InnoDB;

CREATE TABLE Pago (
  id_pago INT AUTO_INCREMENT PRIMARY KEY,
  documento INT NOT NULL,
  fecha_pago DATETIME NOT NULL,
  metodo_pago ENUM('Nequi', 'Bancolombia', 'Efectivo') NOT NULL,
  subtotal_pago INT NOT NULL,
  total_pago INT NOT NULL,
  estado_pago ENUM('Exitoso', 'Pendiente', 'Fallido', 'Cancelado') DEFAULT 'Pendiente',
  FOREIGN KEY (documento) REFERENCES Usuario(documento) ON DELETE CASCADE
) ENGINE=InnoDB;

CREATE TABLE Pedido (
  id_pedido INT AUTO_INCREMENT PRIMARY KEY,
  fecha_pedido DATE NOT NULL,
  estado_pedido ENUM('Pendiente', 'Enviado', 'Entregado', 'Cancelado') NOT NULL DEFAULT 'Pendiente',
  total_pagado INT NOT NULL,
  direccion_envio VARCHAR(255),
  documento INT NOT NULL,
  pago_id INT NOT NULL,
  FOREIGN KEY (documento) REFERENCES Usuario(documento) ON DELETE CASCADE,
  FOREIGN KEY (pago_id) REFERENCES Pago(id_pago) ON DELETE CASCADE
) ENGINE=InnoDB;

CREATE TABLE Pedido_Item (
    id_pedido_item INT AUTO_INCREMENT PRIMARY KEY,
    cantidad INT NOT NULL,
    precio_unitario INT NOT NULL,
    dedicatoria VARCHAR(255),
    id_pedido INT NOT NULL,
    id_producto INT NOT NULL,
    id_opcion INT,
    FOREIGN KEY (id_pedido) REFERENCES Pedido(id_pedido) ON DELETE CASCADE,
    FOREIGN KEY (id_producto) REFERENCES Producto(id_producto) ON DELETE CASCADE,
    FOREIGN KEY (id_opcion) REFERENCES Producto_Adicional(id_opcion) ON DELETE SET NULL
) ENGINE=InnoDB;

CREATE TABLE Carrito_Item (
    id_carrito_item INT AUTO_INCREMENT PRIMARY KEY,
    cantidad INT NOT NULL,
    dedicatoria TEXT,
    id_carrito INT NOT NULL,
    id_producto INT NOT NULL,
    id_opcion INT,
    FOREIGN KEY (id_carrito) REFERENCES Carrito(id_carrito) ON DELETE CASCADE,
    FOREIGN KEY (id_producto) REFERENCES Producto(id_producto) ON DELETE CASCADE,
    FOREIGN KEY (id_opcion) REFERENCES Producto_Adicional(id_opcion) ON DELETE SET NULL
) ENGINE=InnoDB;

CREATE TABLE Envio (
  id_envio INT AUTO_INCREMENT PRIMARY KEY,
  fecha_envio DATE NOT NULL,
  estado_envio ENUM('Preparando', 'En camino', 'Entregado', 'Retrasado') NOT NULL,
  pedido_id INT NOT NULL,
  FOREIGN KEY (pedido_id) REFERENCES Pedido(id_pedido) ON DELETE CASCADE
) ENGINE=InnoDB;

-- Insertar en Usuario
INSERT INTO Usuario (nombre_usuario, apellido_usuario, correo_electronico_usuario, contrasena_usuario, direccion, fecha_registro, rol_usuario, estado_usuario) VALUES
('Juan', 'Pérez', 'juan.perez@example.com', 'contrasena1', 'Calle 123', '2023-01-01', 'Cliente', TRUE),
('María', 'Gómez', 'maria.gomez@example.com', 'contrasena2', 'Calle 456', '2023-01-02', 'Cliente', TRUE),
('Carlos', 'López', 'carlos.lopez@example.com', 'contrasena3', 'Calle 789', '2023-01-03', 'Cliente', TRUE),
('Ana', 'Torres', 'ana.torres@example.com', 'contrasena4', 'Calle 321', '2023-01-04', 'Cliente', TRUE),
('Luis', 'Martínez', 'luis.martinez@example.com', 'contrasena5', 'Calle 654', '2023-01-05', 'Cliente', TRUE);

-- Insertar en Tipo_Flor
INSERT INTO Tipo_Flor (nombre_tipo_flor) VALUES
('Rosa'),
('Lirio'),
('Tulipán'),
('Girasol'),
('Clavel');

-- Insertar en Fecha_Especial
INSERT INTO Fecha_Especial (nombre_fecha_especial) VALUES
('San Valentín'),
('Cumpleaños'),
('Aniversario'),
('Día de la Madre'),
('Día de los Enamorados');

-- Insertar en Evento
INSERT INTO Evento (nombre_evento, descripcion) VALUES
('Boda', 'Celebración de una unión matrimonial'),
('Cumpleaños', 'Fiesta de celebración de un año más de vida'),
('Graduación', 'Ceremonia de finalización de estudios'),
('Aniversario', 'Celebración de años juntos'),
('Fiesta de Navidad', 'Reunión festiva navideña');

-- Insertar en Opcion_Adicional
INSERT INTO Producto_Adicional (opcion_adicional, precio_adicional) VALUES
('Tarjeta de felicitación', 5000),
('Envase especial', 2000),
('Decoración extra', 15000),
('Entrega express', 25000),
('Cesta personalizada', 30000);

-- Insertar en Producto
INSERT INTO Producto (codigo_producto, nombre_producto, foto_Producto, descripcion_producto, precio_producto, estado_producto, cantidad_disponible, id_tipo_flor) VALUES
(101, 'Ramo de Rosas', 'foto_rosas.jpg', 'Ramo con 12 rosas rojas', 50000, TRUE, 10, 1),
(102, 'Lirio Blanco', 'foto_lirio.jpg', 'Lirio blanco fresco', 30000, TRUE, 15, 2),
(103, 'Ramo de Tulipanes', 'foto_tulipanes.jpg', 'Ramo con tulipanes de colores', 45000, TRUE, 8, 3),
(104, 'Girasol', 'foto_girasol.jpg', 'Girasol brillante', 25000, TRUE, 20, 4),
(105, 'Clavel Rojo', 'foto_clavel.jpg', 'Clavel rojo fresco', 20000, TRUE, 12, 5);

-- Insertar en Carrito
INSERT INTO Carrito (documento, total, iva, total_con_iva) VALUES
(1, 50000, 9500, 59500),
(2, 30000, 5700, 35700),
(3, 45000, 8550, 53550),
(4, 25000, 4750, 29750),
(5, 20000, 3800, 23800);

-- Insertar en Pago
INSERT INTO Pago (documento, fecha_pago, metodo_pago, subtotal_pago, total_pago, estado_pago) VALUES
(1, '2023-01-10 10:00:00', 'Nequi', 50000, 59500, 'Exitoso'),
(2, '2023-01-11 11:00:00', 'Bancolombia', 30000, 35700, 'Exitoso'),
(3, '2023-01-12 12:00:00', 'Efectivo', 45000, 53550, 'Exitoso'),
(4, '2023-01-13 13:00:00', 'Nequi', 25000, 29750, 'Exitoso'),
(5, '2023-01-14 14:00:00', 'Bancolombia', 20000, 23800, 'Exitoso');

-- Insertar en Pedido
INSERT INTO Pedido (fecha_pedido, estado_pedido, total_pagado, direccion_envio, documento, pago_id) VALUES
('2023-01-15', 'Pendiente', 59500, 'Calle 123', 1, 1),
('2023-01-16', 'Enviado', 35700, 'Calle 456', 2, 2),
('2023-01-17', 'Entregado', 53550, 'Calle 789', 3, 3),
('2023-01-18', 'Pendiente', 29750, 'Calle 321', 4, 4),
('2023-01-19', 'Cancelado', 23800, 'Calle 654', 5, 5);

-- Insertar en Pedido_Item
INSERT INTO Pedido_Item (cantidad, precio_unitario, dedicatoria, id_pedido, id_producto, id_opcion) VALUES
(1, 50000, 'Feliz Cumpleaños', 1, 1, 1),
(2, 30000, 'Gracias por tu apoyo', 2, 2, 2),
(1, 45000, 'Te quiero mucho', 3, 3, 3),
(1, 25000, 'Por siempre juntos', 4, 4, 4),
(3, 20000, 'Para mi mejor amigo', 5, 5, 5);

-- Insertar en Carrito_Item
INSERT INTO Carrito_Item (cantidad, dedicatoria, id_carrito, id_producto, id_opcion) VALUES
(1, 'Feliz Día', 1, 1, 1),
(2, 'Para el mejor padre', 2, 2, 2),
(1, 'Te extraño', 3, 3, 3),
(3, 'Regalo especial', 4, 4, 4),
(1, 'Pensando en ti', 5, 5, 5);

-- Insertar en Envio
INSERT INTO Envio (fecha_envio, estado_envio, pedido_id) VALUES
('2023-01-20', 'Preparando', 1),
('2023-01-21', 'En camino', 2),
('2023-01-22', 'Entregado', 3),
('2023-01-23', 'Retrasado', 4),
('2023-01-24', 'Preparando', 5);

DELIMITER //

CREATE PROCEDURE ActualizarCantidadCarrito (
    IN p_id_carrito_item INT,
    IN p_cantidad INT
)
BEGIN
    UPDATE Carrito_Item
    SET cantidad = p_cantidad
    WHERE id_carrito_item = p_id_carrito_item;

    CALL ActualizarTotalCarrito((SELECT id_carrito FROM Carrito_Item WHERE id_carrito_item = p_id_carrito_item LIMIT 1));
END//

CREATE PROCEDURE ActualizarCantidadCarritoItem (
    IN id_carrito_item INT,
    IN cantidad INT,
    IN carrito_id INT
)
BEGIN
    UPDATE Carrito_Item
    SET cantidad = cantidad
    WHERE id_carrito_item = id_carrito_item;

    CALL ActualizarTotalCarrito(carrito_id);
END//

CREATE PROCEDURE ActualizarCarritoItem (
    IN p_id_carrito_item INT,
    IN p_opcion_adicional VARCHAR(50),
    IN p_dedicatoria VARCHAR(255)
)
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        SELECT 'Error al actualizar el carrito' AS mensaje_error;
    END;

    START TRANSACTION;

    -- Actualizar el carrito item con la opción adicional y la dedicatoria
    UPDATE Carrito_Item ci
    LEFT JOIN Producto_Adicional pa ON ci.id_opcion = pa.id_opcion
    SET 
        ci.id_opcion = p_opcion_adicional,  -- Cambiar a id_opcion para reflejar la relación
        ci.dedicatoria = p_dedicatoria
    WHERE ci.id_carrito_item = p_id_carrito_item;

    -- Llamar al procedimiento para actualizar el total del carrito correspondiente
    CALL ActualizarTotalCarrito((SELECT id_carrito FROM Carrito_Item WHERE id_carrito_item = p_id_carrito_item LIMIT 1));

    COMMIT;
END//

CREATE PROCEDURE ActualizarContrasena (
    IN token VARCHAR(255),
    IN nueva_contrasena TEXT
)
BEGIN
    DECLARE doc INT;

    SELECT documento INTO doc FROM Usuario WHERE token_recuperacion = token;

    IF doc IS NOT NULL THEN
        UPDATE Usuario SET contrasena_usuario = nueva_contrasena, token_recuperacion = NULL WHERE documento = doc;
    ELSE
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Token inválido.';
    END IF;
END//

CREATE PROCEDURE ActualizarEnvio (
    IN id_envio INT,
    IN fecha_envio DATETIME,
    IN pedido_id INT
)
BEGIN
    UPDATE Envio
    SET fecha_envio = fecha_envio,
        pedido_id = pedido_id
    WHERE id_envio = id_envio;
END//

CREATE PROCEDURE ActualizarEstadoEnvio (
    IN p_id_envio INT,
    IN p_estado_envio VARCHAR(20)
)
BEGIN
    UPDATE Envio
    SET estado_envio = p_estado_envio
    WHERE id_envio = p_id_envio;
END//

CREATE PROCEDURE ActualizarEstadoPago (
    IN p_id_pago INT,
    IN p_estado_pago VARCHAR(20)
)
BEGIN
    UPDATE Pago
    SET estado_pago = p_estado_pago
    WHERE id_pago = p_id_pago;
END//

CREATE PROCEDURE ActualizarEstadoPedido (
    IN p_id_pedido INT,
    IN nuevo_estado VARCHAR(20)
)
BEGIN
    UPDATE Pedido
    SET estado_pedido = nuevo_estado
    WHERE id_pedido = p_id_pedido;
END//

CREATE PROCEDURE ActualizarFechaEspecial (
    IN p_id_fecha_especial INT,
    IN p_nombre_fecha_especial VARCHAR(50)
)
BEGIN
    UPDATE Fecha_Especial
    SET nombre_fecha_especial = p_nombre_fecha_especial
    WHERE id_fecha_especial = p_id_fecha_especial;
END//

CREATE PROCEDURE ActualizarPago (
    IN id_pago INT,
    IN documento INT,
    IN fecha_pago DATETIME,
    IN metodo_pago VARCHAR(20),
    IN subtotal_pago INT,
    IN total_pago INT
)
BEGIN
    UPDATE Pago
    SET 
        documento = documento,
        fecha_pago = fecha_pago,
        metodo_pago = metodo_pago,
        subtotal_pago = subtotal_pago,
        total_pago = total_pago
    WHERE id_pago = id_pago;
END//

CREATE PROCEDURE ActualizarPedido (
    IN p_id_pedido INT,
    IN p_fecha_pedido DATETIME,
    IN p_total_pagado INT,
    IN p_documento INT,
    IN p_pago_id INT
)
BEGIN
    UPDATE Pedido
    SET 
        fecha_pedido = p_fecha_pedido,
        total_pagado = p_total_pagado,
        documento = p_documento,
        pago_id = p_pago_id
    WHERE id_pedido = p_id_pedido;
END//

CREATE PROCEDURE ActualizarPedidoItem (
    IN id_pedido_item INT,
    IN cantidad INT,
    IN precio_unitario INT,
    IN opcion_adicional INT
)
BEGIN
    UPDATE Pedido_Item
    SET 
        cantidad = cantidad,
        precio_unitario = precio_unitario,
        opcion_adicional = opcion_adicional
    WHERE id_pedido_item = id_pedido_item;
END//

CREATE PROCEDURE ActualizarProducto (
    IN p_id_producto INT,
    IN p_codigo_producto INT,
    IN p_nombre_producto VARCHAR(30),
    IN p_foto_producto TEXT,
    IN p_foto_productoURL TEXT,
    IN p_descripcion_producto VARCHAR(255),
    IN p_precio_producto INT,
    IN p_id_tipo_flor INT,
    IN p_id_evento INT,
    IN p_id_fecha_especial INT  
)
BEGIN
    UPDATE Producto
    SET 
        codigo_producto = p_codigo_producto,
        nombre_producto = p_nombre_producto,
        foto_producto = p_foto_producto,
        foto_productoURL = p_foto_productoURL,
        descripcion_producto = p_descripcion_producto,
        precio_producto = p_precio_producto,
        id_tipo_flor = p_id_tipo_flor,
        id_evento = p_id_evento,
        id_fecha_especial = p_id_fecha_especial  
    WHERE id_producto = p_id_producto;
END//

drop procedure ActualizarCantidadDisponible
delimiter //
CREATE PROCEDURE ActualizarCantidadDisponible (
    IN p_id_producto INT,
    IN p_nueva_cantidad INT
)
BEGIN
    DECLARE v_estado BOOLEAN;

    -- Verificamos el estado actual del producto
    SELECT estado_producto INTO v_estado 
    FROM Producto 
    WHERE id_producto = p_id_producto;

    -- Actualizamos la cantidad disponible
    UPDATE Producto
    SET cantidad_disponible = p_nueva_cantidad,
        estado_producto = CASE 
            WHEN p_nueva_cantidad = 0 THEN FALSE
            WHEN p_nueva_cantidad > 0 AND v_estado = FALSE THEN TRUE
            ELSE v_estado
        END
    WHERE id_producto = p_id_producto;
END//

CREATE PROCEDURE ActualizarTipoFlor (
    IN p_id_tipo_flor INT,
    IN p_nombre_tipo_flor VARCHAR(50)
)
BEGIN
    UPDATE Tipo_Flor
    SET nombre_tipo_flor = p_nombre_tipo_flor
    WHERE id_tipo_flor = p_id_tipo_flor;
END//

CREATE PROCEDURE ActualizarTotalCarrito (
    IN id_carrito_param INT
)
BEGIN
    DECLARE total INT DEFAULT 0;
    DECLARE iva INT DEFAULT 0;
    DECLARE total_con_iva INT DEFAULT 0;

    -- Calcular el total sumando los precios de los productos y precios adicionales
    SELECT SUM(
        (ci.cantidad * (p.precio_producto + IFNULL(pa.precio_adicional, 0)))
    ) INTO total
    FROM Carrito_Item ci
    JOIN Producto p ON ci.id_producto = p.id_producto
    LEFT JOIN Producto_Adicional pa ON ci.id_opcion = pa.id_opcion
    WHERE ci.id_carrito = id_carrito_param;

    -- Asegurarse de que el total no sea nulo
    SET total = IFNULL(total, 0);
    
    -- Calcular IVA y total con IVA
    SET iva = total * 0.19;  -- Suponiendo que el IVA es del 19%
    SET total_con_iva = total + iva;

    -- Actualizar el carrito con los nuevos valores
    UPDATE Carrito
    SET 
        total = total,
        iva = iva,
        total_con_iva = total_con_iva
    WHERE id_carrito = id_carrito_param;
END//

CREATE PROCEDURE ActualizarUsuario (
    IN p_documento INT,
    IN p_nombre_usuario VARCHAR(50),
    IN p_apellido_usuario VARCHAR(50),
    IN p_correo_electronico_usuario VARCHAR(100),
    IN p_direccion VARCHAR(255)
)
BEGIN
    UPDATE Usuario
    SET
        nombre_usuario = IFNULL(p_nombre_usuario, nombre_usuario),
        apellido_usuario = IFNULL(p_apellido_usuario, apellido_usuario),
        correo_electronico_usuario = IFNULL(p_correo_electronico_usuario, correo_electronico_usuario),
        direccion = IFNULL(p_direccion, direccion)
    WHERE documento = p_documento;
END//

CREATE PROCEDURE AddEvento (
    IN nombre_evento VARCHAR(50),
    IN foto_evento TEXT,
    IN foto_eventoURL TEXT,
    IN descripcion TEXT
)
BEGIN
    INSERT INTO Evento (nombre_evento, foto_evento, foto_eventoURL, descripcion)
    VALUES (nombre_evento, foto_evento, foto_eventoURL, descripcion);
END//

CREATE PROCEDURE AgregarAlCarrito (
    IN p_documento INT,
    IN p_id_producto INT,
    IN p_cantidad INT
)
BEGIN
    DECLARE carrito_id INT;

    SELECT id_carrito INTO carrito_id
    FROM Carrito
    WHERE documento = p_documento LIMIT 1;

    IF carrito_id IS NULL THEN
        INSERT INTO Carrito (documento) VALUES (p_documento);
        SET carrito_id = LAST_INSERT_ID();
    END IF;

    INSERT INTO Carrito_Item (id_carrito, id_producto, cantidad)
    VALUES (carrito_id, p_id_producto, p_cantidad);

    CALL ActualizarTotalCarrito(carrito_id);
END//

CREATE PROCEDURE AgregarItemAlCarrito (
    IN p_documento INT,
    IN p_id_producto INT,
    IN p_cantidad INT,
    IN p_dedicatoria TEXT,
    IN p_id_opcion INT  -- Cambiado a INT para reflejar correctamente la relación
)
BEGIN
    DECLARE precio_producto INT;
    DECLARE precio_adicional INT;
    DECLARE opcion_adicional VARCHAR(50);
    DECLARE carrito_id INT;

    -- Obtener el precio del producto
    SELECT p.precio_producto 
    INTO precio_producto 
    FROM Producto p 
    WHERE p.id_producto = p_id_producto 
    LIMIT 1;

    -- Obtener el precio adicional y la opción adicional si se proporciona un id_opcion
    IF p_id_opcion IS NOT NULL THEN
        SELECT pa.precio_adicional, pa.opcion_adicional 
        INTO precio_adicional, opcion_adicional
        FROM Producto_Adicional pa
        WHERE pa.id_opcion = p_id_opcion
        LIMIT 1;
    ELSE
        SET precio_adicional = 0;  -- Si no hay opción adicional, establecer en 0
        SET opcion_adicional = NULL; -- Si no hay opción adicional
    END IF;

    -- Verificar si el carrito ya existe
    SELECT c.id_carrito 
    INTO carrito_id
    FROM Carrito c
    WHERE c.documento = p_documento 
    LIMIT 1;

    -- Si no existe, crear un nuevo carrito
    IF carrito_id IS NULL THEN
        INSERT INTO Carrito (documento) VALUES (p_documento);
        SET carrito_id = LAST_INSERT_ID();
    END IF;

    -- Insertar el item en el carrito
    INSERT INTO Carrito_Item (id_carrito, id_producto, cantidad, dedicatoria, id_opcion)
    VALUES (carrito_id, p_id_producto, p_cantidad, p_dedicatoria, p_id_opcion);

    -- Actualizar el total del carrito
    CALL ActualizarTotalCarrito(carrito_id);
END//

CREATE PROCEDURE BuscarUsuarioPorCorreo (
    IN correo VARCHAR(100)
)
BEGIN
    SELECT * FROM Usuario WHERE correo_electronico_usuario = correo;
END//

CREATE PROCEDURE CambiarEstadoProducto (
    IN p_producto_id INT,
    IN p_nuevo_estado BOOLEAN
)
BEGIN
    UPDATE Producto
    SET estado_producto = p_nuevo_estado
    WHERE id_producto = p_producto_id;
END//

CREATE PROCEDURE CambiarEstadoUsuario (
    IN p_documento INT
)
BEGIN 
    DECLARE estado_actual BOOLEAN;

    SELECT estado_usuario INTO estado_actual
    FROM Usuario
    WHERE documento = p_documento;

    SET estado_actual = NOT estado_actual;

    UPDATE Usuario
    SET estado_usuario = estado_actual
    WHERE documento = p_documento;

    SELECT estado_usuario AS estado_despues
    FROM Usuario
    WHERE documento = p_documento;
END//

CREATE PROCEDURE CrearCarrito (
    IN documento INT
)
BEGIN
    INSERT INTO Carrito (documento, total) VALUES (documento, 0);
    SELECT LAST_INSERT_ID() AS id_carrito;
END//

CREATE PROCEDURE CrearEnvio (
    IN fecha_envio DATETIME,
    IN pedido_id INT
)
BEGIN
    INSERT INTO Envio (fecha_envio, estado_envio, pedido_id)
    VALUES (fecha_envio, 'Preparando', pedido_id);
END//

CREATE PROCEDURE CrearFechaEspecial (
    IN nombre_fecha_especial VARCHAR(50)
)
BEGIN
    INSERT INTO Fecha_Especial (nombre_fecha_especial)
    VALUES (nombre_fecha_especial);
END//

CREATE PROCEDURE CrearProducto (
    IN p_codigo_producto INT,
    IN p_nombre_producto VARCHAR(30),
    IN p_foto_producto TEXT,
    IN p_foto_productoURL TEXT,
    IN p_descripcion_producto VARCHAR(255),
    IN p_precio_producto INT,
    IN p_cantidad_disponible INT,
    IN p_id_tipo_flor INT,
    IN p_id_evento INT,
    IN p_id_fecha_especial INT
)
BEGIN
    INSERT INTO Producto(
        codigo_producto, nombre_producto, foto_producto, foto_productoURL, descripcion_producto,
        precio_producto, cantidad_disponible, id_tipo_flor, id_evento, id_fecha_especial
    ) VALUES (
        p_codigo_producto, p_nombre_producto, p_foto_producto, p_foto_productoURL, p_descripcion_producto,
        p_precio_producto, p_cantidad_disponible, p_id_tipo_flor, p_id_evento, p_id_fecha_especial
    );
END//

CREATE PROCEDURE CrearTipoFlor (
    IN nombre_tipo_flor VARCHAR(50)
)
BEGIN
    INSERT INTO Tipo_Flor (nombre_tipo_flor) VALUES (nombre_tipo_flor);
END//

CREATE PROCEDURE CrearUsuario (
    IN p_documento INT,
    IN p_nombre_usuario VARCHAR(50),
    IN p_apellido_usuario VARCHAR(50),
    IN p_correo_electronico_usuario VARCHAR(255),
    IN p_contrasena_usuario TEXT,
    IN p_direccion VARCHAR(255),
    IN p_fecha_registro DATE,
    IN p_estado_usuario BOOLEAN
)
BEGIN
    INSERT INTO Usuario (
        documento,
        nombre_usuario,
        apellido_usuario,
        correo_electronico_usuario,
        contrasena_usuario,
        direccion,
        fecha_registro,
        estado_usuario
    ) VALUES (
        p_documento,
        p_nombre_usuario,
        p_apellido_usuario,
        p_correo_electronico_usuario,
        p_contrasena_usuario,
        p_direccion,
        p_fecha_registro,
        p_estado_usuario
    );
END//

CREATE PROCEDURE DeleteEvento (
    IN p_id_evento INT
)
BEGIN
    DELETE FROM Evento WHERE id_evento = p_id_evento;
END//

CREATE PROCEDURE EditarRolUsuario (
    IN p_documento INT,
    IN p_nuevo_rol VARCHAR(50)
)
BEGIN
    DECLARE rol_permitido BOOLEAN;

    SET rol_permitido = p_nuevo_rol IN ('Vendedor', 'Domiciliario', 'Administrador', 'Cliente');

    IF rol_permitido THEN
        UPDATE Usuario
        SET rol_usuario = p_nuevo_rol
        WHERE documento = p_documento;
    ELSE
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Rol no permitido.';
    END IF;
END//

CREATE PROCEDURE EliminarDelCarrito(IN p_id_carrito INT)
BEGIN
    DELETE FROM Carrito_Item WHERE id_carrito = p_id_carrito;
    DELETE FROM Carrito WHERE id_carrito = p_id_carrito;
    CALL ActualizarTotalCarrito(p_id_carrito);
END//

CREATE PROCEDURE EliminarEnvio(IN p_id_envio INT)
BEGIN
    DELETE FROM Envio WHERE id_envio = p_id_envio;
END//

CREATE PROCEDURE EliminarFechaEspecial(IN id INT)
BEGIN
    DELETE FROM Fecha_Especial WHERE id_fecha_especial = id;
END//

CREATE PROCEDURE EliminarItemDelCarrito(IN p_id_carrito_item INT)
BEGIN
    DECLARE carrito_id INT;
    SELECT id_carrito INTO carrito_id FROM Carrito_Item WHERE id_carrito_item = p_id_carrito_item;
    DELETE FROM Carrito_Item WHERE id_carrito_item = p_id_carrito_item;
    CALL ActualizarTotalCarrito(carrito_id);
END//

CREATE PROCEDURE EliminarPago(IN id INT)
BEGIN
    DELETE FROM Pago WHERE id_pago = id;
END//

CREATE PROCEDURE EliminarPedidoItem(IN id_pedido_item INT)
BEGIN
    DELETE FROM Pedido_Item WHERE id_pedido_item = id_pedido_item;
END//

CREATE PROCEDURE EliminarTipoFlor(IN id INT)
BEGIN
    DELETE FROM Tipo_Flor WHERE id_tipo_flor = id;
END//

CREATE PROCEDURE GetEventoById(IN id_evento INT)
BEGIN
    SELECT * FROM Evento WHERE id_evento = id_evento;
END//

CREATE PROCEDURE ObtenerCarritoCompletoPorUsuarioId(IN p_documento INT)
BEGIN
    SELECT 
        ci.id_carrito_item,
        ci.id_producto,
        ci.cantidad,
        ci.dedicatoria,
        ci.id_opcion,
        p.nombre_producto,
        p.precio_producto,
        p.foto_ProductoURL,
        COALESCE(pa.opcion_adicional, 'Ninguna') AS opcion_adicional,
        COALESCE(pa.precio_adicional, 0) AS precio_adicional,
        (ci.cantidad * (p.precio_producto + COALESCE(pa.precio_adicional, 0))) AS total,
        c.fecha AS fecha_carrito,
        c.total AS total_carrito,
        c.iva AS iva_carrito,
        c.total_con_iva AS total_con_iva_carrito
    FROM Carrito_Item ci
    JOIN Carrito c ON ci.id_carrito = c.id_carrito
    JOIN Producto p ON ci.id_producto = p.id_producto
    LEFT JOIN Producto_Adicional pa ON ci.id_opcion = pa.id_opcion
    WHERE c.documento = p_documento;
END//

CREATE PROCEDURE ObtenerCarritoItemsPorCarritoId(IN p_id_carrito INT)
BEGIN
    SELECT 
        ci.id_carrito_item,
        ci.id_carrito,
        ci.id_producto,
        ci.cantidad,
        ci.dedicatoria,
        ci.opcion_adicional,
        ci.precio_adicional,
        p.nombre_producto,
        p.precio_producto,
        p.foto_productoURL
    FROM 
        Carrito_Item ci
    JOIN 
        Producto p ON ci.id_producto = p.id_producto
    WHERE 
        ci.id_carrito = p_id_carrito;
END//

CREATE PROCEDURE ObtenerCarritoPorUsuarioId(IN p_documento INT)
BEGIN
    SELECT * FROM Carrito WHERE documento = p_documento;
END//

CREATE PROCEDURE ObtenerEnvioPorId(IN p_id INT)
BEGIN
    SELECT * FROM Envio WHERE id_envio = p_id;
END// 

CREATE PROCEDURE ObtenerPedidos()
BEGIN
    SELECT 
        p.id_pedido,
        p.fecha_pedido,
        p.estado_pedido,
        p.total_pagado,
        u.nombre_usuario,
        u.apellido_usuario,
        u.direccion,
        u.documento
    FROM Pedido p
    JOIN Usuario u ON p.documento = u.documento;
END//

CREATE PROCEDURE ObtenerEnvios()
BEGIN
    SELECT * FROM Envio;
END// 

CREATE PROCEDURE ObtenerEventos()
BEGIN
    SELECT * FROM Evento;
END// 

CREATE PROCEDURE ObtenerFechaEspecialPorId(IN p_id INT)
BEGIN
    SELECT * FROM Fecha_Especial WHERE id_fecha_especial = p_id;
END// 

CREATE PROCEDURE ObtenerFechasEspeciales()
BEGIN
    SELECT * FROM Fecha_Especial;
END// 

CREATE PROCEDURE ObtenerItemsPorPedido(IN p_id_pedido INT)
BEGIN
    SELECT * FROM Pedido_Item WHERE id_pedido = p_id_pedido;
END// 

CREATE PROCEDURE ObtenerPagoPorId(IN p_id INT)
BEGIN
    SELECT * FROM Pago WHERE id_pago = p_id;
END// 

CREATE PROCEDURE ObtenerPagos()
BEGIN
    SELECT * FROM Pago;
END// 

CREATE PROCEDURE ObtenerPedidoItemPorId(IN p_id_pedido_item INT)
BEGIN
    SELECT * FROM Pedido_Item WHERE id_pedido_item = p_id_pedido_item;
END// 

CREATE PROCEDURE ObtenerPedidoPorId(IN p_id_pedido INT)
BEGIN
    SELECT * FROM Pedido WHERE id_pedido = p_id_pedido;
END// 

CREATE PROCEDURE ObtenerPedidosPorUsuario(IN p_documento INT)
BEGIN
    SELECT * FROM Pedido WHERE documento = p_documento;
END// 

CREATE PROCEDURE ObtenerProductoPorId(IN p_id_producto INT)
BEGIN
    SELECT * FROM Producto WHERE id_producto = p_id_producto;
END// 

CREATE PROCEDURE ObtenerProductos()
BEGIN
    SELECT * FROM Producto;
END// 

CREATE PROCEDURE ObtenerProductosPorTipoFlor(
    IN p_tipo_flor_id INT, 
    IN p_limit INT, 
    IN p_offset INT
)
BEGIN
    SELECT * FROM Producto 
    WHERE id_tipo_flor = p_tipo_flor_id 
    LIMIT p_limit OFFSET p_offset;
END//

CREATE PROCEDURE ObtenerProductosPorFechaEspecial(
    IN p_fecha_especial_id INT, 
    IN p_limit INT, 
    IN p_offset INT
)
BEGIN
    SELECT * FROM Producto 
    WHERE id_fecha_especial = p_fecha_especial_id 
    LIMIT p_limit OFFSET p_offset;
END//

CREATE PROCEDURE ObtenerTipoFlorPorId(IN p_id INT)
BEGIN
    SELECT * FROM Tipo_Flor WHERE id_tipo_flor = p_id;
END// 

CREATE PROCEDURE ObtenerTiposFlor()
BEGIN
    SELECT * FROM Tipo_Flor;
END// 

CREATE PROCEDURE ObtenerUsuarioPorId(IN p_documento INT)
BEGIN
    SELECT * FROM Usuario WHERE documento = p_documento;
END//

CREATE PROCEDURE ObtenerUsuarios()
BEGIN
    SELECT * FROM Usuario;
END//

DROP PROCEDURE ObtenerHistorialPedidos
DELIMITER //
CREATE PROCEDURE ObtenerHistorialPedidos(IN p_documento INT)
BEGIN
    SELECT 
        sub.id_pedido,
        sub.fecha_pedido,
        sub.estado_pedido,
        sub.total_pagado,
        sub.metodo_pago,
        sub.direccion_envio,
        GROUP_CONCAT(CONCAT(sub.cantidad, ' x ', sub.nombre_producto, 
            ' (', COALESCE(sub.opcion_adicional, 'Ninguno'), ' - $', COALESCE(sub.precio_adicional, 0), 
            ') - Dedicatoria: ', COALESCE(sub.dedicatoria, 'Ninguna')) SEPARATOR ', ') AS productos
    FROM (
        SELECT 
            p.id_pedido,
            p.fecha_pedido,
            p.estado_pedido,
            p.total_pagado,
            pa.metodo_pago,
            p.direccion_envio,
            SUM(pi.cantidad) AS cantidad,
            pr.nombre_producto,
            pa_opcion.opcion_adicional,
            pa_opcion.precio_adicional,
            pi.dedicatoria
        FROM 
            Pedido p
        INNER JOIN 
            Pago pa ON p.pago_id = pa.id_pago
        INNER JOIN 
            Pedido_Item pi ON p.id_pedido = pi.id_pedido
        INNER JOIN 
            Producto pr ON pi.id_producto = pr.id_producto
        LEFT JOIN 
            Producto_Adicional pa_opcion ON pi.id_opcion = pa_opcion.id_opcion
        WHERE 
            p.documento = p_documento
        GROUP BY 
            p.id_pedido, pr.id_producto, pa_opcion.id_opcion, pi.dedicatoria
    ) AS sub
    GROUP BY 
        sub.id_pedido, sub.fecha_pedido, sub.estado_pedido, sub.total_pagado, sub.metodo_pago, sub.direccion_envio
    ORDER BY 
        sub.fecha_pedido DESC;

END //

CREATE PROCEDURE CrearPago (
    IN p_documento INT,
    IN p_fecha_pago DATETIME,
    IN p_metodo_pago VARCHAR(50),
    IN p_subtotal_pago INT,
    IN p_total_pago INT
)
BEGIN
    INSERT INTO Pago (documento, fecha_pago, metodo_pago, subtotal_pago, total_pago)
    VALUES (p_documento, p_fecha_pago, p_metodo_pago, p_subtotal_pago, p_total_pago);
    
    SELECT LAST_INSERT_ID() AS id_pago;
END//

CREATE PROCEDURE CrearPedido (
    IN p_fecha_pedido DATETIME,
    IN p_total_pagado INT,
    IN p_documento INT,
    IN p_pago_id INT,
    IN p_direccion_envio VARCHAR(255)
)
BEGIN
    INSERT INTO Pedido (fecha_pedido, total_pagado, documento, pago_id, direccion_envio)
    VALUES (p_fecha_pedido, p_total_pagado, p_documento, p_pago_id, p_direccion_envio);
END//

CREATE PROCEDURE CrearPedidoItem(
    IN p_id_pedido INT,
    IN p_id_producto INT,
    IN p_cantidad INT,
    IN p_precio_unitario DECIMAL(10, 2),
    IN p_opcion_adicional VARCHAR(50),
    IN p_dedicatoria VARCHAR(255)
)
BEGIN
    DECLARE id_opcion INT DEFAULT NULL;  -- Inicializar a NULL

    -- Verificar existencia de la opción adicional si se proporciona
    IF p_opcion_adicional IS NOT NULL AND p_opcion_adicional <> '' THEN
        SELECT pa.id_opcion INTO id_opcion
        FROM Producto_Adicional pa
        WHERE pa.opcion_adicional = p_opcion_adicional
        LIMIT 1;
    END IF;

    -- Insertar el item en la tabla Pedido_Item
    INSERT INTO Pedido_Item (id_pedido, id_producto, cantidad, precio_unitario, id_opcion, dedicatoria)
    VALUES (p_id_pedido, p_id_producto, p_cantidad, p_precio_unitario, id_opcion, p_dedicatoria);
END //

CREATE PROCEDURE RealizarPedido(
    IN p_documento INT,
    IN p_metodo_pago VARCHAR(50),
    IN p_subtotal_pago DECIMAL(10, 2),
    IN p_total_pago DECIMAL(10, 2),
    IN p_items JSON,
    IN p_direccion_envio VARCHAR(255)
)
BEGIN
    DECLARE id_pago INT;
    DECLARE id_pedido INT;
    DECLARE fecha_pago DATETIME DEFAULT NOW();
    DECLARE item JSON;
    DECLARE cantidad INT;
    DECLARE id_producto INT;
    DECLARE precio_unitario DECIMAL(10, 2);
    DECLARE opcion_adicional VARCHAR(50);
    DECLARE dedicatoria VARCHAR(255);

    -- Crear el pago
    CALL CrearPago(p_documento, fecha_pago, p_metodo_pago, p_subtotal_pago, p_total_pago);
    SET id_pago = LAST_INSERT_ID();

    -- Crear el pedido
    CALL CrearPedido(NOW(), p_total_pago, p_documento, id_pago, p_direccion_envio);
    SET id_pedido = LAST_INSERT_ID();

    -- Procesar cada item en el JSON
    SET @i = 0;
    WHILE @i < JSON_LENGTH(p_items) DO
        SET item = JSON_EXTRACT(p_items, CONCAT('$[', @i, ']'));
        SET id_producto = JSON_UNQUOTE(JSON_EXTRACT(item, '$.id_producto'));
        SET cantidad = CAST(JSON_UNQUOTE(JSON_EXTRACT(item, '$.cantidad')) AS UNSIGNED);
        SET precio_unitario = JSON_UNQUOTE(JSON_EXTRACT(item, '$.precio_unitario'));
        SET opcion_adicional = JSON_UNQUOTE(JSON_EXTRACT(item, '$.opcion_adicional'));
        SET dedicatoria = JSON_UNQUOTE(JSON_EXTRACT(item, '$.dedicatoria'));

        -- Crear el item del pedido
        CALL CrearPedidoItem(id_pedido, id_producto, cantidad, precio_unitario, opcion_adicional, dedicatoria);

        SET @i = @i + 1;
    END WHILE;
END //

CREATE PROCEDURE UpdateEvento(
    IN p_id_evento INT,
    IN p_nombre_evento VARCHAR(50),
    IN p_foto_evento TEXT,
    IN p_foto_eventoURL TEXT,
    IN p_descripcion TEXT
)
BEGIN
    UPDATE Evento
    SET nombre_evento = p_nombre_evento,
        foto_evento = p_foto_evento,
        foto_eventoURL = p_foto_eventoURL,
        descripcion = p_descripcion
    WHERE id_evento = p_id_evento;
END//

CREATE PROCEDURE VaciarCarrito(IN p_documento VARCHAR(20))
BEGIN
    DELETE FROM Carrito_Item WHERE id_carrito IN (SELECT id_carrito FROM Carrito WHERE documento = p_documento);
    DELETE FROM Carrito WHERE documento = p_documento;
END//

CREATE PROCEDURE ValidarToken(IN p_token VARCHAR(255))
BEGIN
    SELECT * FROM Usuario WHERE token_recuperacion = p_token;
END//

CREATE PROCEDURE VerificarDisponibilidadProducto(IN p_id_producto INT, IN p_cantidad INT)
BEGIN
    SELECT * FROM Producto WHERE id_producto = p_id_producto AND cantidad_disponible >= p_cantidad;
END//

CREATE PROCEDURE GetPedidoItems(IN p_id_pedido INT)
BEGIN
    SELECT 
        pi.id_pedido_item,
        pi.id_producto,
        pi.cantidad,
        pi.precio_unitario,
        pi.dedicatoria,
        pi.id_opcion, -- Añadido para obtener la opción adicional
        pr.nombre_producto,
        pr.foto_ProductoURL,
        p.direccion_envio,
        pa.opcion_adicional, -- Opción adicional asociada al producto
        pa.precio_adicional -- Precio adicional de la opción
    FROM 
        Pedido_Item pi
    INNER JOIN 
        Pedido p ON pi.id_pedido = p.id_pedido
    INNER JOIN 
        Producto pr ON pi.id_producto = pr.id_producto
    LEFT JOIN 
        Producto_Adicional pa ON pi.id_opcion = pa.id_opcion -- Usamos LEFT JOIN para incluir productos sin opción adicional
    WHERE 
        p.id_pedido = p_id_pedido;
END //

CREATE PROCEDURE UpdateDireccionUsuario(
    IN p_documento INT,
    IN p_direccion VARCHAR(255)
)
BEGIN
    -- Verifica si el usuario ya tiene una dirección registrada
    IF NOT EXISTS (SELECT 1 FROM Usuario WHERE documento = p_documento AND direccion IS NOT NULL) THEN
        -- Si el usuario no tiene dirección, inserta la nueva dirección
        UPDATE Usuario 
        SET direccion = p_direccion
        WHERE documento = p_documento;
    END IF;
END//

CREATE PROCEDURE CrearOpcionAdicional (
    IN p_opcion_adicional VARCHAR(50),
    IN p_precio_adicional INT
)
BEGIN
    INSERT INTO Producto_Adicional (opcion_adicional, precio_adicional)
    VALUES (p_opcion_adicional, p_precio_adicional);
END//

CREATE PROCEDURE ActualizarOpcionAdicional (
    IN p_id_opcion INT,
    IN p_nueva_opcion_adicional VARCHAR(50),
    IN p_nuevo_precio_adicional INT
)
BEGIN
    UPDATE Producto_Adicional
    SET opcion_adicional = p_nueva_opcion_adicional,
        precio_adicional = p_nuevo_precio_adicional
    WHERE id_opcion = p_id_opcion;
END//

CREATE PROCEDURE EliminarOpcionAdicional(IN p_id_opcion INT)
BEGIN
    DELETE FROM Producto_Adicional WHERE id_opcion = p_id_opcion;
END//

CREATE PROCEDURE ObtenerOpcionesAdicionales()
BEGIN
    SELECT * FROM Producto_Adicional;
END//

CREATE PROCEDURE CancelarPedido(IN p_id_pedido INT)
BEGIN
    UPDATE Pedido
    SET estado_pedido = 'Cancelado'
    WHERE id_pedido = p_id_pedido AND estado_pedido <> 'Cancelado';
END //

SET SQL_SAFE_UPDATES = 0;

-- Crear el rol de Administrador
CREATE ROLE 'Administrador';

-- Crear el rol de VEND//edor
CREATE ROLE 'Vendedor';

-- Crear el rol de Domiciliario
CREATE ROLE 'Domiciliario';

UPDATE usuario
SET rol_usuario = 'Vendedor'
WHERE correo_electronico_usuario = 'juana@gmail.com';

UPDATE usuario
SET rol_usuario = 'Administrador'
WHERE correo_electronico_usuario = 'luz@gmail.com';

UPDATE usuario
SET rol_usuario = 'Domiciliario'
WHERE correo_electronico_usuario = 'ven@gmail.com';
