#SERVER CONFIGURATION
PORT = 4000

#DATABASE CONFIGURATION

DB_PORT = 3306
DB_USER = "root"
DB_PASS = ""
DB_HOST = "localhost"
DB_SCHEMA = "distribuidora_de_flores"

JWT_SECRET=esta-es-una-llave-secreta


-- Eliminar base de datos si existe y crear una nueva
DROP DATABASE IF EXISTS distribuidora_de_flores;
CREATE DATABASE distribuidora_de_flores;
USE distribuidora_de_flores;

CREATE TABLE Usuario (
  documento INT AUTO_INCREMENT PRIMARY KEY,
  nombre_usuario VARCHAR(50),
  apellido_usuario VARCHAR(50),
  correo_electronico_usuario VARCHAR(100),
  contrasena_usuario VARCHAR(255),
  direccion VARCHAR(255),
  fecha_registro DATE,
  rol_usuario VARCHAR(50) DEFAULT 'Cliente',
  estado_usuario BOOLEAN
);

CREATE TABLE Tipo_Flor (
    id_tipo_flor INT AUTO_INCREMENT PRIMARY KEY,
    nombre_tipo_flor VARCHAR(50) NOT NULL,
    foto_tipo_flor TEXT,
    foto_tipo_florURL TEXT
);

CREATE TABLE Fecha_Especial (
    id_fecha_especial INT AUTO_INCREMENT PRIMARY KEY,
    nombre_fecha_especial VARCHAR(50) NOT NULL,
    fecha DATE NOT NULL,
    foto_fecha_especial TEXT,
    foto_fecha_especialURL TEXT
);

CREATE TABLE Evento (
    id_evento INT AUTO_INCREMENT PRIMARY KEY,
    nombre_evento VARCHAR(50) NOT NULL,
    foto_evento TEXT,
    foto_eventoURL TEXT
);

CREATE TABLE Producto (
    id_producto INT AUTO_INCREMENT PRIMARY KEY,
    codigo_producto INT NOT NULL,
    nombre_producto VARCHAR(30) NOT NULL,
    foto_Producto TEXT,
    foto_ProductoURL TEXT,
    descripcion_producto VARCHAR(255) NOT NULL,
    precio_producto DECIMAL(10,2) NOT NULL,
    estado_producto BOOLEAN NOT NULL DEFAULT TRUE,
    cantidad_disponible INT NOT NULL DEFAULT 0,
    id_tipo_flor INT,
    id_evento INT,
    FOREIGN KEY (id_tipo_flor) REFERENCES Tipo_Flor(id_tipo_flor) ON DELETE CASCADE,
    FOREIGN KEY (id_evento) REFERENCES Evento(id_evento) ON DELETE CASCADE
);

CREATE TABLE Carrito (
    id_carrito INT AUTO_INCREMENT PRIMARY KEY,
    documento INT NOT NULL,
    id_producto INT NOT NULL,
    cantidad INT NOT NULL,
    fecha_agregado DATE,
    FOREIGN KEY (documento) REFERENCES Usuario(documento) ON DELETE CASCADE,
    FOREIGN KEY (id_producto) REFERENCES Producto(id_producto) ON DELETE CASCADE
);

CREATE TABLE Pago (
    id_pago INT AUTO_INCREMENT PRIMARY KEY,
    nombre_pago VARCHAR(100) NOT NULL,
    fecha_pago DATE NOT NULL,
    iva INT NOT NULL,
    metodo_pago ENUM('Nequi', 'Bancolombia', 'Efectivo') NOT NULL,
    subtotal_pago DECIMAL(10,2) NOT NULL,
    total_pago DECIMAL(10,2) NOT NULL,
    estado_pago ENUM('Exitoso', 'Pendiente', 'Fallido', 'Cancelado') DEFAULT 'Pendiente'
);

CREATE TABLE Pedido (
    id_pedido INT AUTO_INCREMENT PRIMARY KEY,
    fecha_pedido DATE NOT NULL,
    estado_pedido ENUM('Pendiente', 'Enviado', 'Entregado', 'Cancelado') NOT NULL DEFAULT 'Pendiente',
    total_pagado DECIMAL(10,2) NOT NULL,
    foto_Pedido TEXT,
    foto_PedidoURL TEXT,
    documento INT NOT NULL,
    pago_id INT NOT NULL,
    id_carrito INT,
    FOREIGN KEY (id_carrito) REFERENCES Carrito(id_carrito) ON DELETE CASCADE,
    FOREIGN KEY (documento) REFERENCES Usuario(documento) ON DELETE CASCADE,
    FOREIGN KEY (pago_id) REFERENCES Pago(id_pago) ON DELETE CASCADE
);

CREATE TABLE Pedido_Producto (
    id_pedido_producto INT AUTO_INCREMENT PRIMARY KEY,
    cantidad INT NOT NULL,
    precio_unitario DECIMAL(10,2) NOT NULL,
    pedido_id INT NOT NULL,
    producto_id INT NOT NULL,
    FOREIGN KEY (pedido_id) REFERENCES Pedido(id_pedido) ON DELETE CASCADE,
    FOREIGN KEY (producto_id) REFERENCES Producto(id_producto) ON DELETE CASCADE
);

CREATE TABLE Envio (
    id_envio INT AUTO_INCREMENT PRIMARY KEY,
    fecha_envio DATE NOT NULL,
    estado_envio ENUM('Preparando', 'En camino', 'Entregado', 'Retrasado') NOT NULL,
    pedido_id INT NOT NULL,
    FOREIGN KEY (pedido_id) REFERENCES Pedido(id_pedido) ON DELETE CASCADE
);

CREATE TABLE Historial_Pedido (
    id_historial INT AUTO_INCREMENT PRIMARY KEY,
    id_pedido INT NOT NULL,
    estado_pedido ENUM('Pendiente', 'Enviado', 'Entregado', 'Cancelado') NOT NULL,
    fecha_cambio DATE NOT NULL,
    FOREIGN KEY (id_pedido) REFERENCES Pedido(id_pedido) ON DELETE CASCADE
);

CREATE TABLE Detalle_Pedido (
    id_detalle_pedido INT AUTO_INCREMENT PRIMARY KEY,
    id_pedido INT NOT NULL,
    nombre_producto VARCHAR(50) NOT NULL,
    codigo_producto INT NOT NULL,
    precio DECIMAL(10,2) NOT NULL,
    direccion VARCHAR(255) NOT NULL,
    cantidad INT NOT NULL,
    opciones_adicionales ENUM('Vino', 'Chocolates', 'Peluche') NOT NULL,
    dedicatoria TEXT,
    FOREIGN KEY (id_pedido) REFERENCES Pedido(id_pedido) ON DELETE CASCADE
);

-- Insertar datos actualizados
INSERT INTO Usuario (
    documento, nombre_usuario, apellido_usuario, correo_electronico_usuario, contrasena_usuario, direccion, fecha_registro, estado_usuario
) VALUES 
(123456789, 'Juan', 'Pérez', 'juan.perez@gmail.com', 'contrasena123', 'Calle 123 #45-67', '2023-09-01', TRUE),
(987654321, 'María', 'Gómez', 'maria.gomez@gmail.com', 'segura123', 'Carrera 12 #34-56', '2023-09-02', TRUE),
(111222333, 'Pedro', 'Rodríguez', 'pedro.rodriguez@gmail.com', 'passw0rd', 'Avenida 9 #89-45', '2023-09-03', TRUE),
(444555666, 'Ana', 'Martínez', 'ana.martinez@gmail.com', 'password321', 'Calle 45 #78-12', '2023-09-04', TRUE),
(777888999, 'Laura', 'Castro', 'laura.castro@gmail.com', 'contraseña987', 'Carrera 23 #67-89', '2023-09-05', TRUE);

INSERT INTO Tipo_Flor (nombre_tipo_flor, foto_tipo_flor, foto_tipo_florURL)
VALUES 
('Rosa', 'imagen_rosa.jpg', 'https://miweb.com/rosa.jpg'),
('Tulipán', 'imagen_tulipan.jpg', 'https://miweb.com/tulipan.jpg'),
('Lirio', 'imagen_lirio.jpg', 'https://miweb.com/lirio.jpg'),
('Girasol', 'imagen_girasol.jpg', 'https://miweb.com/girasol.jpg'),
('Clavel', 'imagen_clavel.jpg', 'https://miweb.com/clavel.jpg');

INSERT INTO Fecha_Especial (nombre_fecha_especial, fecha, foto_fecha_especial, foto_fecha_especialURL)
VALUES 
('Día de San Valentín', '2024-02-14', 'imagen_san_valentin.jpg', 'https://miweb.com/san_valentin.jpg'),
('Día de la Madre', '2024-05-12', 'imagen_dia_madre.jpg', 'https://miweb.com/dia_madre.jpg'),
('Día del Padre', '2024-06-16', 'imagen_dia_padre.jpg', 'https://miweb.com/dia_padre.jpg'),
('Navidad', '2024-12-25', 'imagen_navidad.jpg', 'https://miweb.com/navidad.jpg'),
('Año Nuevo', '2024-01-01', 'imagen_ano_nuevo.jpg', 'https://miweb.com/ano_nuevo.jpg');

INSERT INTO evento (id_evento, nombre_evento) VALUES
(1, 'Cumpleaños'),
(2, 'Boda'),
(3, 'Aniversario'),
(4, 'Graduación'),
(5, 'Funeral');

INSERT INTO Producto (
    codigo_producto, nombre_producto, foto_Producto, foto_ProductoURL, descripcion_producto, precio_producto, estado_producto, cantidad_disponible, id_tipo_flor, id_evento
) VALUES 
(6, 'Ramo de Rosas', 'ramo_rosas.jpg', 'https://miweb.com/ramo_rosas.jpg', 'Ramo de 12 rosas rojas', 50000.00, TRUE, 50, 1, 1),
(7, 'Ramo de Tulipanes', 'ramo_tulipanes.jpg', 'https://miweb.com/ramo_tulipanes.jpg', 'Ramo de 10 tulipanes', 45000.00, TRUE, 30, 2, 2),
(8, 'Centro de Lirios', 'centro_lirios.jpg', 'https://miweb.com/centro_lirios.jpg', 'Centro de mesa con lirios', 60000.00, TRUE, 20, 3, 3),
(9, 'Bouquet de Girasoles', 'bouquet_girasoles.jpg', 'https://miweb.com/bouquet_girasoles.jpg', 'Bouquet de girasoles frescos', 55000.00, TRUE, 25, 4, 4),
(10, 'Ramo de Claveles', 'ramo_claveles.jpg', 'https://miweb.com/ramo_claveles.jpg', 'Ramo de claveles rojos', 40000.00, TRUE, 40, 5, 5);

INSERT INTO Carrito (id_carrito, documento, id_producto, cantidad, fecha_agregado)
VALUES 
(1, 123456789, 1, 2, '2023-09-10'),
(2, 987654321, 2, 1, '2023-09-11'),
(3, 111222333, 3, 3, '2023-09-12'),
(4, 444555666, 4, 4, '2023-09-13'),
(5, 777888999, 5, 1, '2023-09-14');

INSERT INTO Pago (
    id_pago, nombre_pago, fecha_pago, iva, metodo_pago, subtotal_pago, total_pago, estado_pago
) VALUES 
(1, 'Pago Pedido 1', '2023-09-15', 19, 'Nequi', 42000.00, 50000.00, 'Exitoso'),
(2, 'Pago Pedido 2', '2023-09-16', 19, 'Bancolombia', 38000.00, 45000.00, 'Pendiente'),
(3, 'Pago Pedido 3', '2023-09-17', 19, 'Efectivo', 51000.00, 60000.00, 'Fallido'),
(4, 'Pago Pedido 4', '2023-09-18', 19, 'Nequi', 46000.00, 55000.00, 'Exitoso'),
(5, 'Pago Pedido 5', '2023-09-19', 19, 'Bancolombia', 34000.00, 40000.00, 'Cancelado');

INSERT INTO Pedido (
    id_pedido, fecha_pedido, estado_pedido, total_pagado, foto_Pedido, foto_PedidoURL, documento, pago_id, id_carrito
) VALUES 
(1, '2023-09-20', 'Pendiente', 50000.00, 'imagen_pedido_1.jpg', 'https://miweb.com/pedido_1.jpg', 123456789, 1, 1),
(2, '2023-09-21', 'Enviado', 45000.00, 'imagen_pedido_2.jpg', 'https://miweb.com/pedido_2.jpg', 987654321, 2, 2),
(3, '2023-09-22', 'Entregado', 60000.00, 'imagen_pedido_3.jpg', 'https://miweb.com/pedido_3.jpg', 111222333, 3, 3),
(4, '2023-09-23', 'Cancelado', 55000.00, 'imagen_pedido_4.jpg', 'https://miweb.com/pedido_4.jpg', 444555666, 4, 4),
(5, '2023-09-24', 'Pendiente', 40000.00, 'imagen_pedido_5.jpg', 'https://miweb.com/pedido_5.jpg', 777888999, 5, 5);

INSERT INTO Pedido_Producto (
    id_pedido_producto, cantidad, precio_unitario, pedido_id, producto_id
) VALUES 
(1, 2, 50000.00, 1, 1),
(2, 1, 45000.00, 2, 2),
(3, 3, 60000.00, 3, 3),
(4, 4, 55000.00, 4, 4),
(5, 1, 40000.00, 5, 5);

INSERT INTO Envio (
    id_envio, fecha_envio, estado_envio, pedido_id
) VALUES 
(1, '2023-09-25', 'Preparando', 1),
(2, '2023-09-26', 'En camino', 2),
(3, '2023-09-27', 'Entregado', 3),
(4, '2023-09-28', 'Retrasado', 4),
(5, '2023-09-29', 'Preparando', 5);

INSERT INTO Historial_Pedido (
    id_historial, id_pedido, estado_pedido, fecha_cambio
) VALUES 
(1, 1, 'Pendiente', '2023-09-20'),
(2, 2, 'Enviado', '2023-09-21'),
(3, 3, 'Entregado', '2023-09-22'),
(4, 4, 'Cancelado', '2023-09-23'),
(5, 5, 'Pendiente', '2023-09-24');

INSERT INTO Detalle_Pedido (
    id_pedido, nombre_producto, codigo_producto, precio, direccion, cantidad, opciones_adicionales, dedicatoria
) VALUES
(1, 'Ramo de Rosas Rojas', 1001, 120.00, 'Calle 123, Bogotá, Colombia', 2, 'Vino, Chocolates', 'Feliz aniversario!'),
(1, 'Ramo de Tulipanes', 1002, 80.00, 'Calle 123, Bogotá, Colombia', 1, 'Chocolates', 'Para un cumpleaños especial'),
(2, 'Ramo de Lilies', 1003, 150.00, 'Avenida 456, Medellín, Colombia', 3, 'Vino', '¡Muchas felicidades en tu nuevo hogar!'),
(3, 'Ramo de Lirios', 1004, 90.00, 'Carrera 789, Cali, Colombia', 1, 'Ninguno', 'Gracias por todo tu apoyo'),
(4, 'Ramo de Margaritas', 1005, 70.00, 'Calle 101, Cartagena, Colombia', 5, 'Chocolates', '¡Te deseo todo lo mejor!');

DELIMITER //

-- Obtener lista de usuarios registrados
CREATE PROCEDURE ObtenerCantidadUsuariosRegistrados()
BEGIN
    SELECT COUNT(*) AS total_usuarios 
    FROM Usuario 
    WHERE rol_usuario = 'Cliente';
END //

-- Cantidad de ventas mensuales
CREATE PROCEDURE ObtenerCantidadVentasMensuales()
BEGIN
    SELECT MONTH(fecha_pedido) AS mes, COUNT(*) AS total_ventas
    FROM Pedido
    WHERE estado_pedido = 'Entregado'
    GROUP BY MONTH(fecha_pedido);
END //

-- Total de ventas mensuales
CREATE PROCEDURE ObtenerTotalVentasMensuales()
BEGIN
    SELECT DATE_FORMAT(fecha_pedido, '%Y-%m') AS mes, SUM(total_pagado) AS total_ventas
    FROM Pedido
    WHERE estado_pedido = 'Entregado'
    GROUP BY DATE_FORMAT(fecha_pedido, '%Y-%m');
END //

-- Obtener todos los usuarios
CREATE PROCEDURE ObtenerUsuarios()
BEGIN
    SELECT * FROM Usuario;
END //

-- Obtener un usuario por su ID
CREATE PROCEDURE ObtenerUsuarioPorId(IN p_documento INT)
BEGIN
    SELECT * FROM Usuario 
    WHERE documento = p_documento;
END //

-- Crear un nuevo usuario
CREATE PROCEDURE CrearUsuario(
    IN p_documento INT,
    IN p_nombre_usuario VARCHAR(50),
    IN p_apellido_usuario VARCHAR(50),
    IN p_correo_electronico_usuario VARCHAR(255),
    IN p_contrasena_usuario TEXT,
    IN p_direccion VARCHAR(255),
    IN p_fecha_registro DATE,
    IN p_estado_usuario BOOLEAN
)
BEGIN
    INSERT INTO Usuario (
        documento,
        nombre_usuario,
        apellido_usuario,
        correo_electronico_usuario,
        contrasena_usuario,
        direccion,
        fecha_registro,
        estado_usuario
    ) VALUES (
        p_documento,
        p_nombre_usuario,
        p_apellido_usuario,
        p_correo_electronico_usuario,
        p_contrasena_usuario,
        p_direccion,
        p_fecha_registro,
        p_estado_usuario
    );
END //

-- Actualizar un usuario
CREATE PROCEDURE ActualizarUsuario(
    IN p_documento INT,
    IN p_nombre_usuario VARCHAR(50),
    IN p_apellido_usuario VARCHAR(50),
    IN p_correo_electronico_usuario VARCHAR(100),
    IN p_direccion VARCHAR(255)
)
BEGIN
    UPDATE Usuario
    SET
        nombre_usuario = IFNULL(p_nombre_usuario, nombre_usuario),
        apellido_usuario = IFNULL(p_apellido_usuario, apellido_usuario),
        correo_electronico_usuario = IFNULL(p_correo_electronico_usuario, correo_electronico_usuario),
        direccion = IFNULL(p_direccion, direccion)
    WHERE documento = p_documento;
END //

-- Cambiar el estado de un usuario (activar/desactivar)
CREATE PROCEDURE CambiarEstadoUsuario(IN p_documento INT)
BEGIN 
    DECLARE estado_actual BOOLEAN;
    
    SELECT estado_usuario INTO estado_actual
    FROM Usuario
    WHERE documento = p_documento;
    
    SET estado_actual = NOT estado_actual;
    
    UPDATE Usuario
    SET estado_usuario = estado_actual
    WHERE documento = p_documento;
    
    SELECT estado_usuario AS estado_despues
    FROM Usuario
    WHERE documento = p_documento;
END //

-- Buscar un usuario por correo
CREATE PROCEDURE BuscarUsuarioPorCorreo(IN p_correo_electronico_usuario VARCHAR(255))
BEGIN
    SELECT * FROM Usuario WHERE correo_electronico_usuario = p_correo_electronico_usuario;
END //

-- Obtener todos los productos
CREATE PROCEDURE ObtenerProductos()
BEGIN
    SELECT * FROM Producto;
END //

-- Obtener producto por ID
CREATE PROCEDURE ObtenerProductoPorId(IN p_producto_id INT)
BEGIN
    SELECT * FROM Producto 
    WHERE id_producto = p_producto_id;
END //

-- Crear nuevo producto
CREATE PROCEDURE CrearProducto(
    IN p_codigo_producto INT,
    IN p_nombre_producto VARCHAR(30),
    IN p_foto_Producto TEXT,
    IN p_foto_ProductoURL TEXT,
    IN p_descripcion_producto VARCHAR(255),
    IN p_precio_producto DECIMAL(10,2),
    IN p_cantidad_disponible INT,
    IN p_id_tipo_flor INT,
    IN p_id_evento INT
)
BEGIN
    INSERT INTO Producto(
        codigo_producto, nombre_producto, foto_Producto, foto_ProductoURL, descripcion_producto,
        precio_producto, cantidad_disponible, id_tipo_flor, id_evento
    ) VALUES (
        p_codigo_producto, p_nombre_producto, p_foto_Producto, p_foto_ProductoURL, p_descripcion_producto,
        p_precio_producto, p_cantidad_disponible, p_id_tipo_flor, p_id_evento
    );
END //

DELIMITER //
CREATE PROCEDURE actualizarProducto(
    IN p_id_producto INT,
    IN p_codigo_producto INT,
    IN p_nombre_producto VARCHAR(30),
    IN p_foto_producto TEXT,          -- Nuevo parámetro para la foto en el sistema de archivos
    IN p_foto_productoURL TEXT,       -- Nuevo parámetro para la URL de la foto
    IN p_descripcion_producto VARCHAR(255),
    IN p_precio_producto DECIMAL(10,2),
    IN p_cantidad_disponible INT,
    IN p_id_tipo_flor INT,
    IN p_id_evento INT
)
BEGIN
    UPDATE Producto
    SET 
        codigo_producto = p_codigo_producto,
        nombre_producto = p_nombre_producto,
        foto_Producto = p_foto_producto, -- Actualizar la foto en el sistema de archivos
        foto_ProductoURL = p_foto_productoURL, -- Actualizar la URL de la foto
        descripcion_producto = p_descripcion_producto,
        precio_producto = p_precio_producto,
        cantidad_disponible = p_cantidad_disponible,
        id_tipo_flor = p_id_tipo_flor,
        id_evento = p_id_evento
    WHERE id_producto = p_id_producto;
END //

-- Cambiar el estado de un producto (activado/desactivado)
CREATE PROCEDURE CambiarEstadoProducto(IN p_producto_id INT, IN p_nuevo_estado BOOLEAN)
BEGIN
    UPDATE Producto
    SET estado_producto = p_nuevo_estado
    WHERE id_producto = p_producto_id;
END //

-- Obtener carrito por usuario ID
CREATE PROCEDURE ObtenerCarritoPorUsuarioId(IN p_documento INT)
BEGIN
    SELECT c.id_carrito, c.cantidad, p.nombre_producto, p.precio_producto
    FROM Carrito c
    JOIN Producto p ON c.id_producto = p.id_producto
    WHERE c.documento = p_documento;
END //

-- Agregar al carrito
CREATE PROCEDURE AgregarAlCarrito(
    IN p_documento INT, 
    IN p_id_producto INT, 
    IN p_cantidad INT
)
BEGIN
    -- Verificar si ya existe el registro en la tabla
    IF EXISTS (
        SELECT 1 
        FROM Carrito 
        WHERE documento = p_documento 
          AND id_producto = p_id_producto
    ) THEN
        -- Actualizar la cantidad si ya existe el producto en el carrito
        UPDATE Carrito
        SET cantidad = cantidad + p_cantidad
        WHERE documento = p_documento 
          AND id_producto = p_id_producto;
    ELSE
        -- Insertar un nuevo registro si el producto no existe en el carrito
        INSERT INTO Carrito (documento, id_producto, cantidad, fecha_agregado)
        VALUES (p_documento, p_id_producto, p_cantidad, CURDATE());
    END IF;
END //

-- Actualizar cantidad en carrito
CREATE PROCEDURE ActualizarCantidadCarrito(
    IN p_id_carrito INT,
    IN p_cantidad INT
)
BEGIN
    UPDATE Carrito
    SET cantidad = p_cantidad
    WHERE id_carrito = p_id_carrito;
END //

-- Eliminar del carrito
CREATE PROCEDURE EliminarDelCarrito(IN p_id_carrito INT)
BEGIN
    DELETE FROM Carrito
    WHERE id_carrito = p_id_carrito;
END //

-- Vaciar carrito
CREATE PROCEDURE VaciarCarrito(IN p_documento INT)
BEGIN
    DELETE FROM Carrito
    WHERE documento = p_documento;
END //

-- Verificar disponibilidad en carrito
CREATE PROCEDURE VerificarDisponibilidadCarrito(
    IN p_id_producto INT,
    IN p_cantidad INT
)
BEGIN
    SELECT CASE
        WHEN EXISTS (
            SELECT 1
            FROM Carrito
            WHERE id_producto = p_id_producto AND cantidad >= p_cantidad
        ) THEN 'Disponible'
        ELSE 'No Disponible'
    END AS disponibilidad;
END //

-- Obtener un pedido
CREATE PROCEDURE ObtenerPedidos()
BEGIN
    SELECT p.*, u.nombre_usuario AS nombre_usuario
    FROM Pedido p
    JOIN Usuario u ON p.documento = u.documento;
END //

-- Obtener un pedido por su ID
CREATE PROCEDURE ObtenerPedidoPorId(IN p_pedido_id INT)
BEGIN
    SELECT * FROM Pedido WHERE id_pedido = p_pedido_id;
END //

-- Crear un nuevo pedido
delimiter //
CREATE PROCEDURE CrearPedido(
    IN fecha_pedido DATE,
    IN total_pagado DECIMAL(10, 2),
    IN foto_Pedido TEXT,
    IN foto_PedidoURL TEXT,
    IN documento VARCHAR(20),
    IN pago_id INT,
    IN id_carrito INT  -- Parámetro añadido
)
BEGIN
    -- Insertar el nuevo pedido en la tabla
    INSERT INTO Pedido (fecha_pedido, total_pagado, foto_Pedido, foto_PedidoURL, documento, pago_id, id_carrito)
    VALUES (fecha_pedido, total_pagado, foto_Pedido, foto_PedidoURL, documento, pago_id, id_carrito);
END //

-- Actualizar un pedido
CREATE PROCEDURE ActualizarPedido(
    IN p_id_pedido INT,
    IN p_fecha_pedido DATE,
    IN p_total_pagado DECIMAL(10,2),
    IN p_foto_Pedido TEXT,
    IN p_foto_PedidoURL TEXT,
    IN p_documento INT,
    IN p_pago_id INT
)
BEGIN
    IF EXISTS (SELECT 1 FROM Pedido WHERE id_pedido = p_id_pedido) THEN
        UPDATE Pedido
        SET fecha_pedido = p_fecha_pedido,
            total_pagado = p_total_pagado,
            foto_Pedido = p_foto_Pedido,
            foto_PedidoURL = p_foto_PedidoURL,
            documento = p_documento,
            pago_id = p_pago_id
        WHERE id_pedido = p_id_pedido;
    ELSE
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Pedido no existe.';
    END IF;
END //

CREATE PROCEDURE ActualizarEstadoPedido(
    IN p_id_pedido INT,
    IN nuevo_estado ENUM('Pendiente', 'Enviado', 'Entregado', 'Cancelado')
)
BEGIN
    UPDATE Pedido
    SET estado_pedido = nuevo_estado
    WHERE id_pedido = p_id_pedido; -- Cambia aquí
END //

CREATE PROCEDURE ObtenerHistorialComprasPorUsuarioId(IN documento VARCHAR(20))
BEGIN
    SELECT * FROM Pedido WHERE documento = documento;
END //


-- Obtener todos los pagos
CREATE PROCEDURE ObtenerPagos()
BEGIN
    SELECT * FROM Pago;
END //

-- Obtener un pago por su ID
CREATE PROCEDURE ObtenerPagoPorId(IN p_pago_id INT)
BEGIN
    SELECT * FROM Pago WHERE id_pago = p_pago_id;
END //

-- Crear nuevo pago
CREATE PROCEDURE CrearPago(
    IN p_nombre_pago VARCHAR(100),
    IN p_fecha_pago DATE,
    IN p_iva INT,
    IN p_metodo_pago ENUM('Nequi', 'Bancolombia', 'Efectivo'),
    IN p_subtotal_pago DECIMAL(10,2),
    IN p_total_pago DECIMAL(10,2)
)
BEGIN
    INSERT INTO Pago (nombre_pago, fecha_pago, iva, metodo_pago, subtotal_pago, total_pago)
    VALUES (p_nombre_pago, p_fecha_pago, p_iva, p_metodo_pago, p_subtotal_pago, p_total_pago);
END //

-- Actualizar un pago

CREATE PROCEDURE ActualizarPago(
    IN p_id_pago INT,
    IN p_nombre_pago VARCHAR(100),
    IN p_fecha_pago DATE,
    IN p_iva INT,
    IN p_metodo_pago ENUM('Nequi', 'Bancolombia', 'Efectivo'),
    IN p_subtotal_pago DECIMAL(10,2),
    IN p_total_pago DECIMAL(10,2)
)
BEGIN
    IF EXISTS (SELECT 1 FROM Pago WHERE id_pago = p_id_pago) THEN
        UPDATE Pago
        SET nombre_pago = p_nombre_pago,
            fecha_pago = p_fecha_pago,
            iva = p_iva,
            metodo_pago = p_metodo_pago,
            subtotal_pago = p_subtotal_pago,
            total_pago = p_total_pago
        WHERE id_pago = p_id_pago;
    ELSE
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Pago no existe.';
    END IF;
END //

CREATE PROCEDURE EliminarPago(IN p_id_pago INT)
BEGIN
    -- Eliminar registros en `pedido_producto` que tienen la clave foránea referenciando `p_id_pago`
    DELETE FROM pedido_producto WHERE pedido_id IN (
        SELECT id_pedido FROM pedido WHERE pago_id = p_id_pago
    );

    -- Eliminar registros en `pedido` que tienen la clave foránea referenciando `p_id_pago`
    DELETE FROM pedido WHERE pago_id = p_id_pago;

    -- Finalmente eliminar el pago
    DELETE FROM Pago WHERE id_pago = p_id_pago;
END //

CREATE PROCEDURE ObtenerHistorialPedidos()
BEGIN
    SELECT * FROM historial_pedido;
END //

CREATE PROCEDURE ObtenerHistorialPorPedidoId(IN p_id_pedido INT)
BEGIN
    SELECT * FROM historial_pedido WHERE id_pedido = p_id_pedido;
END //
 

CREATE PROCEDURE CrearHistorialPedido(
    IN p_id_pedido INT,
    IN p_estado_pedido ENUM('Pendiente', 'Enviado', 'Entregado', 'Cancelado'),
    IN p_fecha_cambio DATE
)
BEGIN
    INSERT INTO HistorialPedido (id_pedido, estado_pedido, fecha_cambio)
    VALUES (p_id_pedido, p_estado_pedido, p_fecha_cambio);
END //


CREATE PROCEDURE ObtenerDetallesPedidos()
BEGIN
    SELECT * FROM Detalle_Pedido; -- Cambia 'DetallesPedido' por el nombre de tu tabla de detalles de pedidos
END //



CREATE PROCEDURE ObtenerDetallePedidoPorId(IN detalle_id INT)
BEGIN
    SELECT * FROM Detalle_Pedido WHERE id_detalle_pedido = detalle_id;
END //

CREATE PROCEDURE ObtenerEnvios()
BEGIN
    SELECT * FROM Envio;
END //

-- Obtener un envío por su ID
CREATE PROCEDURE ObtenerEnvioPorId(IN p_envio_id INT)
BEGIN
    SELECT * FROM Envio WHERE id_envio = p_envio_id;
END //

-- Crear nuevo envío
CREATE PROCEDURE CrearEnvio(
    IN p_fecha_envio DATE,
    IN p_pedido_id INT
)
BEGIN
    INSERT INTO Envio (
        fecha_envio, pedido_id
    ) VALUES (
        p_fecha_envio, p_pedido_id
    );
END //

-- Actualizar un envío
CREATE PROCEDURE ActualizarEnvio(
    IN p_id_envio INT,
    IN p_fecha_envio DATE,
    IN p_pedido_id INT
)
BEGIN
    IF EXISTS (SELECT 1 FROM Envio WHERE id_envio = p_id_envio) THEN
        UPDATE Envio
        SET fecha_envio = p_fecha_envio,
            pedido_id = p_pedido_id
        WHERE id_envio = p_id_envio;
    ELSE
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Envio no existe.';
    END IF;
END //

-- Eliminar un envío
CREATE PROCEDURE EliminarEnvio(IN p_id_envio INT)
BEGIN
    IF EXISTS (SELECT 1 FROM Envio WHERE id_envio = p_id_envio) THEN
        DELETE FROM Envio WHERE id_envio = p_id_envio;
    ELSE
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Envio no existe.';
    END IF;
END //

CREATE PROCEDURE ActualizarEstadoEnvio(IN p_id_envio INT, IN p_estado_envio ENUM('Preparando', 'En camino', 'Entregado', 'Retrasado'))
BEGIN
    UPDATE Envio SET estado_envio = p_estado_envio WHERE id_envio = p_id_envio;
END //

-- Obtener todos los tipos de flores
CREATE PROCEDURE ObtenerTiposDeFlores()
BEGIN
    SELECT * FROM Tipo_Flor;
END //

-- Obtener un tipo de flor por ID
CREATE PROCEDURE ObtenerTipoFlorPorId(IN p_id_tipo_flor INT)
BEGIN
    SELECT * FROM Tipo_Flor WHERE id_tipo_flor = p_id_tipo_flor;
END //

-- Obtener todas las fechas especiales
CREATE PROCEDURE ObtenerFechasEspeciales()
BEGIN
    SELECT * FROM Fecha_Especial;
END //

-- Obtener una fecha especial por ID
CREATE PROCEDURE ObtenerFechaEspecialPorId(IN p_id_fecha_especial INT)
BEGIN
    SELECT * FROM Fecha_Especial WHERE id_fecha_especial = p_id_fecha_especial;
END //

CREATE PROCEDURE CrearFechaEspecial(
    IN p_nombre_fecha_especial VARCHAR(50),
    IN p_fecha DATE,
    IN p_foto TEXT,
    IN p_fotoURL TEXT
)
BEGIN
    INSERT INTO Fecha_Especial (
        nombre_fecha_especial, fecha, foto_fecha_especial, foto_fecha_especialURL
    ) VALUES (
        p_nombre_fecha_especial, p_fecha, p_foto, p_fotoURL
    );
END //

-- Actualizar una fecha especial
CREATE PROCEDURE ActualizarFechaEspecial(
    IN p_id_fecha_especial INT,
    IN p_nombre_fecha_especial VARCHAR(50),
    IN p_fecha DATE,
    IN p_foto VARCHAR(255),
    IN p_fotoURL VARCHAR(255)
)
BEGIN
    UPDATE Fecha_Especial
    SET nombre_fecha_especial = p_nombre_fecha_especial,
        fecha = p_fecha,
        foto_fecha_especial = p_foto,
        foto_fecha_especialURL = p_fotoURL
    WHERE id_fecha_especial = p_id_fecha_especial;
END //

-- Eliminar una fecha especial
CREATE PROCEDURE EliminarFechaEspecial(
    IN p_id_fecha_especial INT
)
BEGIN
    DELETE FROM Fecha_Especial
    WHERE id_fecha_especial = p_id_fecha_especial;
END //

-- EVENTOS

DELIMITER //
CREATE PROCEDURE AddEvento (
    IN p_nombre_evento VARCHAR(50),
    IN p_foto_evento TEXT,
    IN p_foto_eventoURL TEXT
)
BEGIN
    INSERT INTO Evento (nombre_evento, foto_evento, foto_eventoURL)
    VALUES (p_nombre_evento, p_foto_evento, p_foto_eventoURL);
END;
//

CREATE PROCEDURE ObtenerEventos()
BEGIN
    SELECT id_evento, nombre_evento, foto_evento, foto_eventoURL FROM Evento;
END;
//

CREATE PROCEDURE GetEventoById (
    IN p_id_evento INT
)
BEGIN
    SELECT * FROM Evento WHERE id_evento = p_id_evento;
END;
//

CREATE PROCEDURE UpdateEvento (
    IN p_id_evento INT,
    IN p_nombre_evento VARCHAR(255),
    IN p_foto_evento VARCHAR(255),
    IN p_foto_eventoURL VARCHAR(255)
)
BEGIN
    -- Actualiza el evento sin verificar duplicados
    UPDATE Evento
    SET nombre_evento = p_nombre_evento,
        foto_evento = p_foto_evento,
        foto_eventoURL = p_foto_eventoURL
    WHERE id_evento = p_id_evento;
END;

-- Crear detalle de pedido
CREATE PROCEDURE CrearDetallePedido(
    IN p_id_detalle_pedido INT,
    IN p_id_pedido INT,
    IN p_id_producto INT,
    IN p_cantidad INT,
    IN p_precio_unitario DECIMAL(10,2)
)
BEGIN
    INSERT INTO Detalle_Pedido (
        id_detalle_pedido, id_pedido, id_producto, cantidad, precio_unitario
    ) VALUES (
        p_id_detalle_pedido, p_id_pedido, p_id_producto, p_cantidad, p_precio_unitario
    );
END //

-- Obtener detalles de un pedido por ID
CREATE PROCEDURE ObtenerDetallesPedidoPorId(IN p_id_pedido INT)
BEGIN
    SELECT * FROM Detalle_Pedido WHERE id_pedido = p_id_pedido;
END //

-- Actualizar detalle de pedido
CREATE PROCEDURE ActualizarDetallePedido(
    IN p_id_detalle_pedido INT,
    IN p_id_pedido INT,
    IN p_id_producto INT,
    IN p_cantidad INT,
    IN p_precio_unitario DECIMAL(10,2)
)
BEGIN
    UPDATE Detalle_Pedido
    SET id_pedido = p_id_pedido,
        id_producto = p_id_producto,
        cantidad = p_cantidad,
        precio_unitario = p_precio_unitario
    WHERE id_detalle_pedido = p_id_detalle_pedido;
END //

-- Eliminar detalle de pedido
CREATE PROCEDURE EliminarDetallePedido(IN p_id_detalle_pedido INT)
BEGIN
    DELETE FROM Detalle_Pedido
    WHERE id_detalle_pedido = p_id_detalle_pedido;
END //


CREATE PROCEDURE EliminarPedido(IN p_pedido_id INT)
BEGIN
    -- Eliminar los detalles del pedido
    DELETE FROM Detalle_Pedido WHERE id_pedido = p_pedido_id;
    
    -- Eliminar los productos asociados al pedido
    DELETE FROM Pedido_Producto WHERE pedido_id = p_pedido_id;
    
    -- Eliminar el envío asociado al pedido
    DELETE FROM Envio WHERE pedido_id = p_pedido_id;
    
    -- Eliminar el historial del pedido
    DELETE FROM Historial_Pedido WHERE id_pedido = p_pedido_id;
    
    -- Eliminar el pedido
    DELETE FROM Pedido WHERE id_pedido = p_pedido_id;
    
    -- Confirmar eliminación
    SELECT 'Pedido y registros asociados eliminados exitosamente' AS mensaje;
END //

DELIMITER //

-- Procedimiento para obtener todos los tipos de flores
CREATE PROCEDURE ObtenerTiposFlor()
BEGIN
    SELECT * FROM Tipo_Flor;
END //

delimiter //
CREATE PROCEDURE CrearTipoFlor(IN nombre_tipo_flor VARCHAR(50), IN foto_tipo_flor TEXT, IN foto_tipo_florURL TEXT)
BEGIN
    INSERT INTO Tipo_Flor (nombre_tipo_flor, foto_tipo_flor, foto_tipo_florURL)
    VALUES (nombre_tipo_flor, foto_tipo_flor, foto_tipo_florURL);
END //

CREATE PROCEDURE ActualizarTipoFlor(IN id INT, IN nombre_tipo_flor VARCHAR(50), IN foto_tipo_flor TEXT, IN foto_tipo_florURL TEXT)
BEGIN
    UPDATE Tipo_Flor
    SET nombre_tipo_flor = nombre_tipo_flor,
        foto_tipo_flor = foto_tipo_flor,
        foto_tipo_florURL = foto_tipo_florURL
    WHERE id_tipo_flor = id;
END //

-- Procedimiento para eliminar un tipo de flor
CREATE PROCEDURE EliminarTipoFlor(IN id INT)
BEGIN
    DELETE FROM Tipo_Flor WHERE id_tipo_flor = id;
END //

CREATE PROCEDURE DeleteEvento (
    IN p_id_evento INT
)
BEGIN
    -- Eliminar registros de pedido_producto que dependen de los productos del evento
    DELETE FROM pedido_producto 
    WHERE producto_id IN (SELECT id_producto FROM producto WHERE id_evento = p_id_evento);

    -- Eliminar productos asociados al evento
    DELETE FROM producto WHERE id_evento = p_id_evento;

    -- Luego eliminar el evento
    DELETE FROM Evento WHERE id_evento = p_id_evento;
END;


SET SQL_SAFE_UPDATES = 0;

-- Crear el rol de Administrador
CREATE ROLE 'Administrador';

-- Crear el rol de Vendedor
CREATE ROLE 'Vendedor';

-- Crear el rol de Domiciliario
CREATE ROLE 'Domiciliario';

UPDATE usuario
SET rol_usuario = 'Vendedor'
WHERE correo_electronico_usuario = 'juan@gmail.com';

UPDATE usuario
SET rol_usuario = 'Administrador'
WHERE correo_electronico_usuario = 'luz@gmail.com';

UPDATE usuario
SET rol_usuario = 'Domiciliario'
WHERE correo_electronico_usuario = 'ven@gmail.com';


select * from usuario